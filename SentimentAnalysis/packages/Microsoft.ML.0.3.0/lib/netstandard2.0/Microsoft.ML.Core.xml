<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ML.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ML.Runtime.CommandLine.ArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            Attach this attribute to instance fields of types used
            as the destination of command line argument parsing.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.ArgumentAttribute.#ctor(Microsoft.ML.Runtime.CommandLine.ArgumentType)">
            <summary>
            Allows control of command line parsing.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.ArgumentAttribute.Type">
            <summary>
            The error checking to be done on the argument.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.ArgumentAttribute.ShortName">
            <summary>
            The short name(s) of the argument.
            Set to null means use the default short name if it does not
            conflict with any other parameter name.
            Set to String.Empty for no short name.
            More than one short name can be separated by commas or spaces.
            This property should not be set for DefaultArgumentAttributes.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.ArgumentAttribute.HelpText">
            <summary>
            The help text for the argument.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.ArgumentAttribute.Purpose">
            <summary>
            Allows the GUI or other tools to inspect the intended purpose of the argument and pick a correct custom control.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdLexer.GetToken(System.Text.StringBuilder)">
            <summary>
            Consume the characters of the next token and append them to the string builder.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdQuoter.QuoteValue(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if it quoted.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.ArgumentType">
            <summary>
            Used to control parsing of command line arguments.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.ArgumentType.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.ArgumentType.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.ArgumentType.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.ArgumentType.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.ArgumentType.LastOccurenceWins">
            <summary>
            For non-collection arguments, when the argument is specified more than
            once no error is reported and the value of the argument is the last
            value which occurs in the argument list.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.ArgumentType.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.DefaultArgumentAttribute">
            <summary>
            Indicates that this argument is the default argument.
            '/' or '-' prefix only the argument value is specified.
            The ShortName property should not be set for DefaultArgumentAttribute
            instances. The LongName property is used for usage text only and
            does not affect the usage of the argument.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.DefaultArgumentAttribute.#ctor(Microsoft.ML.Runtime.CommandLine.ArgumentType)">
            <summary>
            Indicates that this argument is the default argument.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.HideEnumValueAttribute">
            <summary>
            On an enum value - indicates that the value should not be shown in help or UI.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.EnumValueDisplayAttribute">
            <summary>
            On an enum value - specifies the display name.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.ErrorReporter">
            <summary>
            A delegate used in error reporting.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.CmdParser">
             <summary>
             Parser for command line arguments.
            
             The parser specification is infered from the instance fields of the object
             specified as the destination of the parse.
             Valid argument types are: int, uint, string, bool, enums
             Also argument types of Array of the above types are also valid.
            
             Error checking options can be controlled by adding a ArgumentAttribute
             to the instance fields of the destination object.
            
             At most one field may be marked with the DefaultArgumentAttribute
             indicating that arguments without a '-' or '/' prefix will be parsed as that argument.
            
             If not specified then the parser will infer default options for parsing each
             instance field. The default long name of the argument is the field name. The
             default short name is the first character of the long name. Long names and explicitly
             specified short names must be unique. Default short names will be used provided that
             the default short name does not conflict with a long name or an explicitly
             specified short name.
            
             Arguments which are array types are collection arguments. Collection
             arguments can be specified multiple times.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.ParseArguments(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Object)">
            <summary>
            Parses a command line. This assumes that the exe name has been stripped off.
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="env"> The host environment</param>
            <param name="settings">The command line</param>
            <param name="destination">The object to receive the options</param>
            <returns>true if no errors were detected</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.ParseArguments(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Object,System.Type,Microsoft.ML.Runtime.CommandLine.ErrorReporter)">
            <summary>
            Parses a command line. This assumes that the exe name has been stripped off.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="env"> The host environment</param>
            <param name="settings">The command line</param>
            <param name="destination">The object to receive the options</param>
            <param name="destinationType">The type of 'destination'</param>
            <param name="reporter"> The destination for parse errors. </param>
            <returns>true if no errors were detected</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.ParseArguments(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Object,Microsoft.ML.Runtime.CommandLine.ErrorReporter)">
            <summary>
            Parses a command line. This assumes that the exe name has been stripped off.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="env"> The host environment</param>
            <param name="settings">The command line</param>
            <param name="destination">The object to receive the options</param>
            <param name="reporter"> The destination for parse errors. </param>
            <returns>true if no errors were detected</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.IsNumericType(System.Type)">
            <summary>
            Check whether a certain type is numeric.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.ArgumentsUsage(Microsoft.ML.Runtime.IHostEnvironment,System.Type,System.Object,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="env"> The host environment. </param>
            <param name="type"> The type of the arguments to display usage for. </param>
            <param name="defaults"> The default values. </param>
            <param name="showRsp"> Whether to show the @file item. </param>
            <param name="columns"> The number of columns to format the output to. </param>
            <returns> Printable string containing a user friendly description of command line arguments. </returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.GetConsoleWindowWidth">
            <summary>
            Fix the window width for the Core build to remove the kernel32.dll dependency. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.ParseArgumentList(Microsoft.ML.Runtime.CommandLine.CmdParser.ArgumentInfo,System.String[],System.Object,Microsoft.ML.Runtime.CommandLine.CmdParser.ArgValue[])">
            <summary>
            Parses an argument list into an object
            </summary>
            <param name="info"></param>
            <param name="strs"></param>
            <param name="destination"></param>
            <param name="values"></param>
            <returns> true if successful </returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.Parse(Microsoft.ML.Runtime.CommandLine.CmdParser.ArgumentInfo,System.String[],System.Object)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="info"></param>
            <param name="strs"> The arguments to parse. </param>
            <param name="destination"> The destination of the parsed arguments. </param>
            <returns> true if no parse errors were encountered. </returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.AppendCustomItem(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.Runtime.CommandLine.CmdParser.ArgumentInfo,System.Object,Microsoft.ML.Runtime.CommandLine.SettingsFlags,System.Text.StringBuilder)">
            <summary>
            GetSettingsCore handles the top-level case. This handles the nested custom record case.
            It deals with custom "unparse" functionality, as well as quoting. It also appends to a StringBuilder
            instead of returning a string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.CmdParser.GetUsageString(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.Runtime.CommandLine.CmdParser.ArgumentInfo,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            A user friendly usage string describing the command line argument syntax.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.CmdParser.ArgInfo.Arg._arg">
            <summary>
            This class exposes those parts of this wrapped <see cref="T:Microsoft.ML.Runtime.CommandLine.CmdParser.Argument"/> appropriate
            for public consumption.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.CommandLine.SubComponent">
            <summary>
            This class is used to represent the command line encoding of a component plus its
            settings. Typically, these settings will be parsed at a later time. Parsing at
            the parent level merely gathers the settings into an instance of SubComponent.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.SubComponent.Kind">
            <summary>
            The type/kind of sub-component. This string will never be null, but may be empty.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.SubComponent.Settings">
            <summary>
            The settings strings for the sub-component. This array will never be null, but may be empty.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.CommandLine.SubComponent.IsEmpty">
            <summary>
            It's generally better to use the IsGood() extension method. It handles null testing
            and empty testing.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.CommandLine.SubComponent.#ctor(System.String,System.String[])">
            <summary>
            This assumes ownership of the settings array.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.SpecialPurpose.ColumnSelector">
            <summary>
            This is used to specify a column mapping of a data transform.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.SpecialPurpose.MultilineText">
            <summary>
            This is meant to be a large text (like a c# code block, for example).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.CommandLine.SpecialPurpose.ColumnName">
            <summary>
            This is used to specify a column mapping of a data transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ComponentCatalog">
            <summary>
            This catalogs instantiatable components (aka, loadable classes). Components are registered via
            a descendant of <see cref="T:Microsoft.ML.Runtime.LoadableClassAttributeBase"/>, identifying the names and signature types under which the component
            type should be registered. Signatures are delegate types that return void and specify that parameter
            types for component instantiation. Each component may also specify an "arguments object" that should
            be provided at instantiation time. Typically the arguments object is populated via the <see cref="T:Microsoft.ML.Runtime.CommandLine.CmdParser"/>
            from a <see cref="T:Microsoft.ML.Runtime.CommandLine.SubComponent"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo">
            <summary>
            Provides information on an instantiatable component, aka, loadable class.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.Key">
            <summary>
            Used for dictionary lookup based on signature and name.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.ExtraArgCount">
            <summary>
            Count of component construction arguments, NOT including the arguments object (if there is one).
            This matches the number of arguments for the signature type delegate(s).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.LoaderType">
            <summary>
            The type that contains the construction method, whether static Instance property,
            static Create method, or constructor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.Summary">
            <summary>
            Summary of the component.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.UserName">
            <summary>
            UserName may be null or empty, indicating that it should be hidden in UI.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.IsHidden">
            <summary>
            Whether this is a "hidden" component, that generally shouldn't be displayed
            to users.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.LoadNames">
            <summary>
            All load names. The first is the default.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.InstanceGetter">
            <summary>
            The static property that returns an instance of this loadable class.
            This creation method does not support an arguments class.
            Only one of Ctor, Create and InstanceGetter can be non-null.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.Constructor">
            <summary>
            The constructor to create an instance of this loadable class.
            This creation method supports an arguments class.
            Only one of Ctor, Create and InstanceGetter can be non-null.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateMethod">
            <summary>
            The static method that creates an instance of this loadable class.
            This creation method supports an arguments class.
            Only one of Ctor, Create and InstanceGetter can be non-null.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.DocName">
            <summary>
            A name of an embedded resource containing documentation for this
            loadable class. This is non-null only in the event that we have
            verified the assembly of <see cref="P:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.LoaderType"/> actually contains
            this resource.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstance(Microsoft.ML.Runtime.IHostEnvironment,System.Object,System.Object[])">
            <summary>
            Create an instance, given the arguments object and arguments to the signature delegate.
            The args should be non-null iff ArgType is non-null. The length of the extra array should
            match the number of paramters for the signature delgate. When that number is zero, extra
            may be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstance``1(Microsoft.ML.Runtime.IHostEnvironment,System.Object,System.Object[])">
            <summary>
            Create an instance, given the arguments object and arguments to the signature delegate.
            The args should be non-null iff ArgType is non-null. The length of the extra array should
            match the number of paramters for the signature delgate. When that number is zero, extra
            may be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstance``1(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Create an instance with default arguments.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateArguments">
            <summary>
            If <see cref="F:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.ArgType"/> is not null, returns a new default instance of <see cref="F:Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.ArgType"/>.
            Otherwise, returns null.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.ComponentCatalog.DebugLevel">
            <summary>
            Debug reporting level.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.CacheLoadedAssemblies">
            <summary>
            This loads assemblies that are in our "root" directory (where this assembly is) and caches
            information for the loadable classes in loaded assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.LoadAssembly(System.String)">
            <summary>
            Given an assembly path, load the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.CacheClassesExtra(System.String[])">
            <summary>
            Make sure the given assemblies are loaded and that their loadable classes have been catalogued.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.GetAllClasses(System.String[])">
            <summary>
            Return an array containing information for all instantiatable components.
            If provided, the given set of assemblies is loaded first.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.GetAllDerivedClasses(System.Type,System.Type,System.String[])">
            <summary>
            Return an array containing information for instantiatable components with the given
            signature and base type. If provided, the given set of assemblies is loaded first.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.GetAllSignatureTypes(System.String[])">
            <summary>
            Return an array containing all the known signature types. If provided, the given set of assemblies
            is loaded first.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.SignatureToString(System.Type)">
            <summary>
            Returns a string name for a given signature type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.CreateInstance``2(Microsoft.ML.Runtime.CommandLine.SubComponent{``0,``1},Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Create an instance of the indicated component.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.CreateInstance``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.CommandLine.SubComponent,System.Object[])">
            <summary>
            Create an instance of the indicated component with the given extra parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.CreateInstance``2(Microsoft.ML.Runtime.CommandLine.SubComponent{``0,``1},Microsoft.ML.Runtime.IHostEnvironment,System.Object[])">
            <summary>
            Create an instance of the indicated component with the given extra parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance``2(Microsoft.ML.Runtime.IHostEnvironment,``0@,Microsoft.ML.Runtime.CommandLine.SubComponent{``0,``1},System.Object[])">
            <summary>
            Try to create an instance of the indicated component with the given extra parameters. If there is no
            such component in the catalog, returns false. Any other error results in an exception.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance``2(Microsoft.ML.Runtime.IHostEnvironment,``0@,Microsoft.ML.Runtime.CommandLine.SubComponent,System.Object[])">
            <summary>
            Try to create an instance of the indicated component with the given extra parameters. If there is no
            such component in the catalog, returns false. Any other error results in an exception.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance``2(Microsoft.ML.Runtime.IHostEnvironment,``0@,System.String,System.String,System.Object[])">
            <summary>
            Try to create an instance of the indicated component and settings with the given extra parameters.
            If there is no such component in the catalog, returns false. Any other error results in an exception.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ComponentCatalog.ParseArguments(Microsoft.ML.Runtime.IHostEnvironment,System.Object,System.String,System.String)">
            <summary>
            Parses arguments using CmdParser. If there's a problem, it throws an InvalidOperationException,
            with a message giving usage.
            </summary>
            <param name="env">The host environment</param>
            <param name="args">The argument object</param>
            <param name="settings">The settings string</param>
            <param name="name">The name is used for error reporting only</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.SignatureDefault">
            <summary>
            Common signature type with no extra parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.LoadableClassAttribute.#ctor(System.Type,System.Type,System.Type,System.String,System.String[])">
            <summary>
            Assembly attribute used to specify that a class is loadable by a machine learning
            host enviroment, such as TLC
            </summary>
            <param name="instType">The class type that is loadable</param>
            <param name="argType">The argument type that the constructor takes (may be null)</param>
            <param name="sigType">The signature of the constructor of this class (in addition to the arguments parameter)</param>
            <param name="userName">The name to use when presenting a list to users</param>
            <param name="loadNames">The names that can be used to load the class, for example, from a command line</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.LoadableClassAttribute.#ctor(System.Type,System.Type,System.Type,System.Type,System.String,System.String[])">
            <summary>
            Assembly attribute used to specify that a class is loadable by a machine learning
            host enviroment, such as TLC
            </summary>
            <param name="instType">The class type that is loadable</param>
            <param name="loaderType">The class type that contains the construction method</param>
            <param name="argType">The argument type that the constructor takes (may be null)</param>
            <param name="sigType">The signature of the constructor of this class (in addition to the arguments parameter)</param>
            <param name="userName">The name to use when presenting a list to users</param>
            <param name="loadNames">The names that can be used to load the class, for example, from a command line</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.LoadableClassAttribute.#ctor(System.String,System.Type,System.Type,System.Type,System.String,System.String[])">
            <summary>
            Assembly attribute used to specify that a class is loadable by a machine learning
            host enviroment, such as TLC
            </summary>
            <param name="summary">The description summary of the class type</param>
            <param name="instType">The class type that is loadable</param>
            <param name="argType">The argument type that the constructor takes (may be null)</param>
            <param name="sigType">The signature of the constructor of this class (in addition to the arguments parameter)</param>
            <param name="userName">The name to use when presenting a list to users</param>
            <param name="loadNames">The names that can be used to load the class, for example, from a command line</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.LoadableClassAttribute.#ctor(System.String,System.Type,System.Type,System.Type,System.Type,System.String,System.String[])">
            <summary>
            Assembly attribute used to specify that a class is loadable by a machine learning
            host enviroment, such as TLC
            </summary>
            <param name="summary">The description summary of the class type</param>
            <param name="instType">The class type that is loadable</param>
            <param name="loaderType">The class type that contains the construction method</param>
            <param name="argType">The argument type that the constructor takes (may be null)</param>
            <param name="sigType">The signature of the constructor of this class (in addition to the arguments parameter)</param>
            <param name="userName">The name to use when presenting a list to users</param>
            <param name="loadNames">The names that can be used to load the class, for example, from a command line</param>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.InstanceType">
            <summary>
            The type that is created/loaded.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.LoaderType">
            <summary>
            The type that contains the construction method, whether static Instance property,
            static Create method, or constructor. Of course, a constructor is only permissible if
            this type derives from InstanceType. This defaults to the same as InstanceType.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.ArgType">
            <summary>
            The command line arguments object type. This should be null if there isn't one.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.SigTypes">
            <summary>
            This indicates the extra parameter types. It must be a delegate type. The return type should be void.
            The parameter types of the SigType delegate should NOT include the ArgType.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.CtorTypes">
            <summary>
            Note that CtorTypes includes the ArgType (if there is one), and the parameter types of the SigType.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.Summary">
            <summary>
            The description summary of the class type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.UserName">
            <summary>
            UserName may be null or empty indicating that it should be hidden in UI.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.LoadableClassAttributeBase.DocName">
            <summary>
            This should indicate a path within the <code>doc/public</code> directory next to the TLC
            solution, where the documentation lies. This value will be used as part of a URL, so,
            the path separator should be phrased as '/' forward slashes rather than backslashes.</summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ColumnType">
            <summary>
            ColumnType is the abstract base class for all types in the IDataView type system.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ColumnType.#ctor(System.Type,Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            Internal sub types can pass both the rawType and rawKind values. This asserts that they
            are consistent.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.RawType">
            <summary>
            The raw System.Type for this ColumnType. Note that this is the raw representation type
            and NOT the complete information content of the ColumnType. Code should not assume that
            a RawType uniquely identifiers a ColumnType.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.RawKind">
            <summary>
            The DataKind corresponding to RawType, if there is one (zero otherwise). It is equivalent
            to the result produced by DataKindExtensions.TryGetDataKind(RawType, out kind).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsPrimitive">
            <summary>
            Whether this is a primitive type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.AsPrimitive">
            <summary>
            Equivalent to "this as PrimitiveType".
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsNumber">
            <summary>
            Whether this type is a standard numeric type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsText">
            <summary>
            Whether this type is the standard text type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsBool">
            <summary>
            Whether this type is the standard boolean type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsTimeSpan">
            <summary>
            Whether this type is the standard timespan type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsDateTime">
            <summary>
            Whether this type is a DvDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsDateTimeZone">
            <summary>
            Whether this type is a DvDateTimeZone.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsStandardScalar">
            <summary>
            Whether this type is a standard scalar type completely determined by its RawType
            (not a KeyType or StructureType, etc).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsKey">
            <summary>
            Whether this type is a key type, which implies that the order of values is not significant,
            and arithmetic is non-sensical. A key type can define a cardinality.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.AsKey">
            <summary>
            Equivalent to "this as KeyType".
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.KeyCount">
            <summary>
            Zero return means either it's not a key type or the cardinality is unknown.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.KeyCountCore">
            <summary>
            The only sub-class that should override this is KeyType!
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsVector">
            <summary>
            Whether this is a vector type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.AsVector">
            <summary>
            Equivalent to "this as VectorType".
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.ItemType">
            <summary>
            For non-vector types, this returns the column type itself (ie, return this).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.IsKnownSizeVector">
            <summary>
            Whether this is a vector type with known size. Returns false for non-vector types.
            Equivalent to VectorSize > 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.VectorSize">
            <summary>
            Zero return means either it's not a vector or the size is unknown. Equivalent to
            IsVector ? ValueCount : 0 and to IsKnownSizeVector ? ValueCount : 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.ValueCount">
            <summary>
            For non-vectors, this returns one. For unknown size vectors, it returns zero.
            Equivalent to IsVector ? VectorSize : 1.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.ItemTypeCore">
            <summary>
            The only sub-class that should override this is VectorType!
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.VectorSizeCore">
            <summary>
            The only sub-class that should override this is VectorType!
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ColumnType.ValueCountCore">
            <summary>
            The only sub-class that should override this is VectorType!
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ColumnType.SameSizeAndItemType(Microsoft.ML.Runtime.Data.ColumnType)">
            <summary>
            Equivalent to calling Equals(ColumnType) for non-vector types. For vector type,
            returns true if current and other vector types have the same size and item type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.StructuredType">
            <summary>
            The abstract base class for all non-primitive types.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.PrimitiveType">
            <summary>
            The abstract base class for all primitive types. Values of these types can be freely copied
            without concern for ownership, mutation, or disposing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.TextType">
            <summary>
            The standard text type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.NumberType">
            <summary>
            The standard number types.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.BoolType">
            <summary>
            The standard boolean type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.TimeSpanType">
            <summary>
            The standard timespan type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.KeyType">
            <summary>
            KeyTypes are for "id"-like data. The information happens to be stored in an unsigned integer
            type, but the information is not inherently numeric, so, typically, arithmetic is not
            meaningful. Examples are SSNs, phone numbers, auto-generated/incremented key values,
            class numbers, etc. For example, in multi-class classification, the label is typically
            a class number which is naturally a KeyType.
            
            KeyTypes can be contiguous (the class number example), in which case they can have
            a cardinality/Count. For non-contiguous KeyTypes the Count property returns zero.
            Any KeyType (contiguous or not) can have a Min value. The Min value is always >= 0.
            
            Note that the representation value does not necessarily match the logical value.
            For example, if a KeyType has range 1000-5000, then it has a Min of 1000, Count
            of 4001, but the representational values are 1-4001. The representation value zero
            is reserved to mean none/invalid.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.KeyType.IsValidDataKind(Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            Returns true iff the given DataKind is valid for a KeyType. The valid ones are
            U1, U2, U4, and U8, that is, the unsigned integer kinds.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.KeyType.Min">
            <summary>
            This is the Min of the key type for display purposes and conversion to/from text. The values
            actually stored always start at 1 (for the smallest legal value), with zero being reserved
            for "not there"/"none". Typical Min values are 0 or 1, but can be any value >= 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.KeyType.Count">
            <summary>
            If this key type has contiguous values and a known cardinality, Count is that cardinality.
            Otherwise, this returns zero. Note that such a key type can be converted to a bit vector
            representation by mapping to a vector of length Count, with "id" mapped to a vector with
            1 in slot (id - 1) and 0 in all other slots. This is the standard "indicator"
            representation. Note that an id of 0 is used to represent the notion "none", which is
            typically mapped to a vector of all zeros (of length Count).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.VectorType">
            <summary>
            The standard vector type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VectorType.#ctor(Microsoft.ML.Runtime.Data.PrimitiveType,Microsoft.ML.Runtime.Data.VectorType)">
            <summary>
            Creates a VectorType whose dimensionality information is the given template's information.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VectorType.#ctor(Microsoft.ML.Runtime.Data.PrimitiveType,Microsoft.ML.Runtime.Data.VectorType,System.Int32[])">
            <summary>
            Creates a VectorType whose dimensionality information is the given template's information
            concatenated with the specified dims.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VectorType.IsSubtypeOf(Microsoft.ML.Runtime.Data.VectorType)">
            <summary>
            Returns true if current has the same item type of other, and the size
            of other is unknown or the current size is equal to the size of other.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.DataKind">
            <summary>
            Data type specifier.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.DataKindExtensions">
            <summary>
            Extension methods related to the DataKind enum.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.ToIndex(Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            Maps a DataKind to a value suitable for indexing into an array of size KindCount.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.FromIndex(System.Int32)">
            <summary>
            Maps from an index into an array of size KindCount to the corresponding DataKind
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.ToMaxInt(Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            For integer DataKinds, this returns the maximum legal value. For un-supported kinds,
            it returns zero.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.ToMinInt(Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            For integer DataKinds, this returns the minimum legal value. For un-supported kinds,
            it returns one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.ToType(Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            Maps a DataKind to the associated .Net representation type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.TryGetDataKind(System.Type,Microsoft.ML.Runtime.Data.DataKind@)">
            <summary>
            Try to map a System.Type to a corresponding DataKind value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DataKindExtensions.GetString(Microsoft.ML.Runtime.Data.DataKind)">
            <summary>
            Get the canonical string for a DataKind. Note that using DataKind.ToString() is not stable
            and is also slow, so use this instead.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.DvDateTime">
            <summary>
            A struct to represent a DateTime column type
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTime.#ctor(System.DateTime)">
            <summary>
            This ctor initializes _ticks to the value of sdt.Ticks, and ignores its DateTimeKind value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTime.#ctor(Microsoft.ML.Runtime.Data.DvInt8)">
            <summary>
            This ctor accepts any value for ticks, but produces an NA if ticks is out of the legal range.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTime.Date">
            <summary>
            Gets the date component of this object.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTime.UtcNow">
            <summary>
            Gets a DvDateTime object representing the current UTC date and time.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTime.op_Implicit(System.DateTime)~Microsoft.ML.Runtime.Data.DvDateTime">
            <summary>
            Creates a new DvDateTime with the same number of ticks as in sdt, ignoring its DateTimeKind value.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.DvDateTimeZone">
            <summary>
            A struct to represent a DateTimeZone column type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTimeZone.#ctor(Microsoft.ML.Runtime.Data.DvInt8,Microsoft.ML.Runtime.Data.DvInt2)">
            <summary>
            Given a number of ticks for the date time portion and a number of minutes for
            the time zone offset, this constructs a new DvDateTimeZone. If anything is invalid,
            it produces NA.
            </summary>
            <param name="ticks">The number of clock ticks in the date time portion</param>
            <param name="offset">The time zone offset in minutes</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTimeZone.#ctor(Microsoft.ML.Runtime.Data.DvDateTime,Microsoft.ML.Runtime.Data.DvTimeSpan)">
            <summary>
            Constructs a DvDateTimeZone from a clock date-time and a time zone offset from UTC.
            </summary>
            <param name="dt">The clock time</param>
            <param name="offset">The offset</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTimeZone.ValidateDate(Microsoft.ML.Runtime.Data.DvDateTime,Microsoft.ML.Runtime.Data.DvInt2@)">
            <summary>
            This method takes a DvDateTime representing clock time, and a TimeSpan representing an offset,
            validates that both the clock time and the UTC time (which is the clock time minus the offset)
            are within the valid range, and returns a DvDateTime representing the UTC time (dateTime-offset).
            </summary>
            <param name="dateTime">The clock time</param>
            <param name="offset">The offset. This value is assumed to be validated as a legal offset: 
            a value in whole minutes, between -14 and 14 hours.</param>
            <returns>The UTC DvDateTime representing the input clock time minus the offset</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTimeZone.TryValidateOffset(Microsoft.ML.Runtime.Data.DvInt8,Microsoft.ML.Runtime.Data.DvInt2@)">
            <summary>
            This method takes a TimeSpan offset, validates that it is a legal offset for DvDateTimeZone (i.e.
            in whole minutes, and between -14 and 14 hours), and returns the offset in number of minutes.
            </summary>
            <param name="offsetTicks"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTimeZone.UtcDateTime">
            <summary>
            Gets the UTC date and time.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTimeZone.Offset">
            <summary>
            Gets the offset as a time span.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTimeZone.OffsetMinutes">
            <summary>
            Gets the offset in minutes.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTimeZone.ClockDate">
            <summary>
            Gets the date component of the ClockDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTimeZone.UtcDate">
            <summary>
            Gets the date component of the UtcDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvDateTimeZone.UtcNow">
            <summary>
            Gets a DvDateTimeZone object representing the current UTC date and time (with offset=0).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTimeZone.Equals(Microsoft.ML.Runtime.Data.DvDateTimeZone)">
            <summary>
            Compare two values for equality. Note that this differs from System.DateTimeOffset's
            definition of Equals, which only compares the UTC values, not the offsets.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvDateTimeZone.CompareTo(Microsoft.ML.Runtime.Data.DvDateTimeZone)">
            <summary>
            Compare two values for ordering. Note that this differs from System.DateTimeOffset's
            definition of CompareTo, which only compares the UTC values, not the offsets.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.DvTimeSpan">
            <summary>
            A struct to represent a DateTime column type
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvBool.RawValue">
            <summary>
            Property to return the raw value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvBool.GetRawBits(Microsoft.ML.Runtime.Data.DvBool)">
            <summary>
            Static method to return the raw value. This is more convenient than the
            property in code-generation scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvBool.IsFalse">
            <summary>
            Returns whether this value is false.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvBool.IsTrue">
            <summary>
            Returns whether this value is true.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvBool.IsNA">
            <summary>
            Returns whether this value is NA.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvInt1.RawValue">
            <summary>
            Property to return the raw value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvInt1.GetRawBits(Microsoft.ML.Runtime.Data.DvInt1)">
            <summary>
            Static method to return the raw value. This is more convenient than the
            property in code-generation scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvInt2.RawValue">
            <summary>
            Property to return the raw value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvInt2.GetRawBits(Microsoft.ML.Runtime.Data.DvInt2)">
            <summary>
            Static method to return the raw value. This is more convenient than the
            property in code-generation scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvInt4.RawValue">
            <summary>
            Property to return the raw value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvInt4.GetRawBits(Microsoft.ML.Runtime.Data.DvInt4)">
            <summary>
            Static method to return the raw value. This is more convenient than the
            property in code-generation scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvInt4.Pow(Microsoft.ML.Runtime.Data.DvInt4,Microsoft.ML.Runtime.Data.DvInt4)">
            <summary>
            Raise a to the b power. Special cases:
            * 1^NA => 1
            * NA^0 => 1
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvInt8.RawValue">
            <summary>
            Property to return the raw value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvInt8.GetRawBits(Microsoft.ML.Runtime.Data.DvInt8)">
            <summary>
            Static method to return the raw value. This is more convenient than the
            property in code-generation scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvInt8.Pow(Microsoft.ML.Runtime.Data.DvInt8,Microsoft.ML.Runtime.Data.DvInt8)">
            <summary>
            Raise a to the b power. Special cases:
            * 1^NA => 1
            * NA^0 => 1
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.DvText">
            <summary>
            A text value. This essentially wraps a portion of a string. This can distinguish between a length zero
            span of characters and "NA", the latter having a Length of -1.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.DvText._outerBuffer">
            <summary>
            The fields/properties <see cref="F:Microsoft.ML.Runtime.Data.DvText._outerBuffer"/>, <see cref="F:Microsoft.ML.Runtime.Data.DvText._ichMin"/>, and <see cref="P:Microsoft.ML.Runtime.Data.DvText.IchLim"/> are
            private so client code can't easily "cheat" and look outside the <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> characters. Client
            code that absolutely needs access to this information can call <see cref="M:Microsoft.ML.Runtime.Data.DvText.GetRawUnderlyingBufferInfo(System.Int32@,System.Int32@)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.DvText.Length">
            <summary>
            For the "NA" value, this is -1; otherwise, it is the number of characters in the text.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvText.NA">
            <summary>
            Gets a DvText that represents "NA", aka "Missing".
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvText.Empty">
            <summary>
            Gets an empty (zero character) DvText.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvText.HasChars">
            <summary>
            Gets whether this DvText contains any characters. Equivalent to Length > 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvText.IsEmpty">
            <summary>
            Gets whether this DvText is empty (distinct from NA). Equivalent to Length == 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvText.IsNA">
            <summary>
            Gets whether this DvText represents "NA". Equivalent to Length == -1.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.DvText.Item(System.Int32)">
            <summary>
            Gets the indicated character in the text.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor using the indicated range of characters in the given string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.#ctor(System.String)">
            <summary>
            Constructor using the indicated string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.GetRawUnderlyingBufferInfo(System.Int32@,System.Int32@)">
            <summary>
            This method retrieves the raw buffer information. The only characters that should be
            referenced in the returned string are those between the returned min and lim indices.
            If this is an NA value, the min will be zero and the lim will be -1. For either an
            empty or NA value, the returned string may be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.op_Equality(Microsoft.ML.Runtime.Data.DvText,Microsoft.ML.Runtime.Data.DvText)">
            <summary>
            This compares the two text values with NA propagation semantics.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.op_Inequality(Microsoft.ML.Runtime.Data.DvText,Microsoft.ML.Runtime.Data.DvText)">
            <summary>
            This compares the two text values with NA propagation semantics.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.Equals(Microsoft.ML.Runtime.Data.DvText)">
            <summary>
            This implements IEquatable's Equals method. Returns true if both are NA.
            For NA propagating equality comparison, use the == operator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.Identical(Microsoft.ML.Runtime.Data.DvText,Microsoft.ML.Runtime.Data.DvText)">
            <summary>
            Does not propagate NA values. Returns true if both are NA (same as a.Equals(b)).
            For NA propagating equality comparison, use the == operator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.EqualsStr(System.String)">
            <summary>
            Compare equality with the given system string value. Returns false if "this" is NA.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.CompareTo(Microsoft.ML.Runtime.Data.DvText)">
            <summary>
            For implementation of <see cref="T:System.IComparable`1"/>. Uses code point comparison.
            Generally, this is not appropriate for sorting for presentation to a user.
            Sorts NA before everything else.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.SubSpan(System.Int32)">
            <summary>
            Return a DvText consisting of characters from ich to the end of this DvText.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.SubSpan(System.Int32,System.Int32)">
            <summary>
            Return a DvText consisting of the indicated range of characters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.ToString">
            <summary>
            Return a non-null string corresponding to the characters in this DvText.
            Note that an empty string is returned for both Empty and NA.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.SplitOne(System.Char,Microsoft.ML.Runtime.Data.DvText@,Microsoft.ML.Runtime.Data.DvText@)">
            <summary>
            Splits this instance on the left-most occurrence of separator and produces the left
            and right <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> values. If this instance does not contain the separator character,
            this returns false and sets <paramref name="left"/> to this instance and <paramref name="right"/>
            to the default <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.SplitOne(System.Char[],Microsoft.ML.Runtime.Data.DvText@,Microsoft.ML.Runtime.Data.DvText@)">
            <summary>
            Splits this instance on the left-most occurrence of an element of separators character array and
            produces the left and right <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> values. If this instance does not contain any of the
            characters in separators, thiss return false and initializes <paramref name="left"/> to this instance
            and <paramref name="right"/> to the default <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.SplitOneRight(System.Char,Microsoft.ML.Runtime.Data.DvText@,Microsoft.ML.Runtime.Data.DvText@)">
            <summary>
            Splits this instance on the right-most occurrence of separator and produces the left
            and right <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> values. If this instance does not contain the separator character,
            this returns false and sets <paramref name="left"/> to this instance and <paramref name="right"/>
            to the default <see cref="T:Microsoft.ML.Runtime.Data.DvText"/> value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.Trim">
            <summary>
            Returns a text span with leading and trailing spaces trimmed. Note that this
            will remove only spaces, not any form of whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.TrimWhiteSpace">
            <summary>
            Returns a text span with leading and trailing whitespace trimmed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.TrimEndWhiteSpace">
            <summary>
            Returns a text span with trailing whitespace trimmed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.TryParse(System.Single@)">
            <summary>
            This produces zero for an empty string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.DvText.TryParse(System.Double@)">
            <summary>
            This produces zero for an empty string.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ICounted">
            <summary>
            This is a base interface for an <see cref="T:Microsoft.ML.Runtime.Data.ICursor"/> and <see cref="T:Microsoft.ML.Runtime.Data.IRow"/>. It contains only the
            positional properties, no behavioral methods, and no data.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ICounted.Position">
            <summary>
            This is incremented for ICursor when the underlying contents changes, giving clients a way to detect change.
            Generally it's -1 when the object is in an invalid state. In particular, for an <see cref="T:Microsoft.ML.Runtime.Data.ICursor"/>, this is -1
            when the <see cref="P:Microsoft.ML.Runtime.Data.ICursor.State"/> is <see cref="F:Microsoft.ML.Runtime.Data.CursorState.NotStarted"/> or <see cref="F:Microsoft.ML.Runtime.Data.CursorState.Done"/>.
            
            Note that this position is not position within the underlying data, but position of this cursor only.
            If one, for example, opened a set of parallel streaming cursors, or a shuffled cursor, each such cursor's
            first valid entry would always have position 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ICounted.Batch">
            <summary>
            This provides a means for reconciling multiple streams of counted things. Generally, in each stream,
            batch numbers should be non-decreasing. Furthermore, any given batch number should only appear in one
            of the streams. Order is determined by batch number. The reconciler ensures that each stream (that is
            still active) has at least one item available, then takes the item with the smallest batch number.
            
            Note that there is no suggestion that the batches for a particular entry will be consistent from
            cursoring to cursoring, except for the consistency in resulting in the same overall ordering. The same
            entry could have different batch numbers from one cursoring to another. There is also no requirement
            that any given batch number must appear, at all.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ICounted.GetIdGetter">
            <summary>
            A getter for a 128-bit ID value. It is common for objects to serve multiple <see cref="T:Microsoft.ML.Runtime.Data.ICounted"/>
            instances to iterate over what is supposed to be the same data, e.g., in a <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>
            a cursor set will produce the same data as a serial cursor, just partitioned, and a shuffled cursor
            will produce the same data as a serial cursor or any other shuffled cursor, only shuffled. The ID
            exists for applications that need to reconcile which entry is actually which. Ideally this ID should
            be unique, but for practical reasons, it suffices if collisions are simply extremely improbable.
            
            Note that this ID, while it must be consistent for multiple streams according to the semantics
            above, is not considered part of the data per se. So, to take the example of a data view specifically,
            a single data view must render consistent IDs across all cursorings, but there is no suggestion at
            all that if the "same" data were presented in a different data view (as by, say, being transformed,
            cached, saved, or whatever), that the IDs between the two different data views would have any
            discernable relationship.</summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.CursorState">
            <summary>
            Defines the possible states of a cursor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ICursor">
            <summary>
            The basic cursor interface. <see cref="P:Microsoft.ML.Runtime.Data.ICounted.Position"/> is incremented by <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveNext"/>
            and <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveMany(System.Int64)"/>. When the cursor state is <see cref="F:Microsoft.ML.Runtime.Data.CursorState.NotStarted"/> or
            <see cref="F:Microsoft.ML.Runtime.Data.CursorState.Done"/>, <see cref="P:Microsoft.ML.Runtime.Data.ICounted.Position"/> is -1. Otherwise,
            <see cref="P:Microsoft.ML.Runtime.Data.ICounted.Position"/> >= 0.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ICursor.State">
            <summary>
            Returns the state of the cursor. Before the first call to <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveNext"/> or
            <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveMany(System.Int64)"/> this should be <see cref="F:Microsoft.ML.Runtime.Data.CursorState.NotStarted"/>. After
            any call those move functions that returns <c>true</c>, this should return
            <see cref="F:Microsoft.ML.Runtime.Data.CursorState.Good"/>, 
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ICursor.MoveNext">
            <summary>
            Advance to the next row. When the cursor is first created, this method should be called to
            move to the first row. Returns <c>false</c> if there are no more rows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ICursor.MoveMany(System.Int64)">
            <summary>
            Logically equivalent to calling <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveNext"/> the given number of times. The
            <paramref name="count"/> parameter must be positive. Note that cursor implementations may be
            able to optimize this.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ICursor.GetRootCursor">
            <summary>
            Returns a cursor that can be used for invoking <see cref="P:Microsoft.ML.Runtime.Data.ICounted.Position"/>, <see cref="P:Microsoft.ML.Runtime.Data.ICursor.State"/>,
            <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveNext"/>, and <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveMany(System.Int64)"/>, with results identical to calling those
            on this cursor. Generally, if the root cursor is not the same as this cursor, using the
            root cursor will be faster. As an aside, note that this is not necessarily the case of
            values from <see cref="M:Microsoft.ML.Runtime.Data.ICounted.GetIdGetter"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ISchema">
            <summary>
            Interface for schema information.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ISchema.ColumnCount">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchema.TryGetColumnIndex(System.String,System.Int32@)">
            <summary>
            If there is a column with the given name, set col to its index and return true.
            Otherwise, return false. The expectation is that if there are multiple columns
            with the same name, the greatest index is returned.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchema.GetColumnName(System.Int32)">
            <summary>
            Get the name of the given column index. Column names must be non-empty and non-null,
            but multiple columns may have the same name.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchema.GetColumnType(System.Int32)">
            <summary>
            Get the type of the given column index. This must be non-null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchema.GetMetadataTypes(System.Int32)">
            <summary>
            Produces the metadata kinds and associated types supported by the given column.
            If there is no metadata the returned enumerable should be non-null, but empty.
            The string key values are unique, non-empty, non-null strings. The type should
            be non-null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchema.GetMetadataTypeOrNull(System.String,System.Int32)">
            <summary>
            If the given column has metadata of the indicated kind, this returns the type of the metadata.
            Otherwise, it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchema.GetMetadata``1(System.String,System.Int32,``0@)">
            <summary>
            Fetches the indicated metadata for the indicated column.
            This should only be called if a corresponding call to GetMetadataTypeOrNull
            returned non-null. And the TValue type should be compatible with the type
            returned by that call. Otherwise, this should throw an exception.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ISchematized">
            <summary>
            Base interface for schematized information. IDataView and IRowCursor both derive from this.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ISchematized.Schema">
            <summary>
            Gets an instance of Schema.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IDataView">
            <summary>
            The input and output of Query Operators (Transforms). This is the fundamental data pipeline
            type, comparable to IEnumerable for LINQ.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.IDataView.CanShuffle">
            <summary>
            Whether this IDataView supports shuffling of rows, to any degree.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IDataView.GetRowCount(System.Boolean)">
            <summary>
            Returns the number of rows if known. Null means unknown. If lazy is true, then
            this is permitted to return null when it might return a non-null value on a subsequent
            call. This indicates, that the transform does not YET know the number of rows, but
            may in the future. If lazy is false, then this is permitted to do some work (no more
            that it would normally do for cursoring) to determine the number of rows.
            
            Most components will return the same answer whether lazy is true or false. Some, like
            a cache, might return null until the cache is fully populated (when lazy is true). When
            lazy is false, such a cache would block until the cache was populated.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IDataView.GetRowCursor(System.Func{System.Int32,System.Boolean},Microsoft.ML.Runtime.IRandom)">
            <summary>
            Get a row cursor. The active column indices are those for which needCol(col) returns true.
            The schema of the returned cursor will be the same as the schema of the IDataView, but getting
            a getter for an inactive columns will throw. The <paramref name="needCol"/> predicate must be
            non-null. To activate all columns, pass "col => true".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IDataView.GetRowCursorSet(Microsoft.ML.Runtime.Data.IRowCursorConsolidator@,System.Func{System.Int32,System.Boolean},System.Int32,Microsoft.ML.Runtime.IRandom)">
            <summary>
            This constructs a set of parallel batch cursors. The value n is a recommended limit
            on cardinality. If <paramref name="n"/> is non-positive, this indicates that the caller
            has no recommendation, and the implementation should have some default behavior to cover
            this case. Note that this is strictly a recommendation: it is entirely possible that
            an implementation can return a different number of cursors.
            
            The cursors should return the same data as returned through
            <see cref="M:Microsoft.ML.Runtime.Data.IDataView.GetRowCursor(System.Func{System.Int32,System.Boolean},Microsoft.ML.Runtime.IRandom)"/>, except partitioned: no two cursors
            should return the "same" row as would have been returned through the regular serial cursor,
            but all rows should be returned by exactly one of the cursors returned from this cursor.
            The cursors can have their values reconciled downstream through the use of the
            <see cref="P:Microsoft.ML.Runtime.Data.ICounted.Batch"/> property.
            </summary>
            <param name="consolidator">This is an object that can be used to reconcile the
            returned array of cursors. When the array of cursors is of length 1, it is legal,
            indeed expected, that this parameter should be null.</param>
            <param name="needCol">The predicate, where a column is active if this returns true.</param>
            <param name="n">The suggested degree of parallelism.</param>
            <param name="rand">An instance </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IRowCursorConsolidator">
            <summary>
            This is used to consolidate parallel cursors into a single cursor. The object that determines
            the number of cursors and splits the row "stream" provides the consolidator object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IRowCursorConsolidator.CreateCursor(Microsoft.ML.Runtime.IChannelProvider,Microsoft.ML.Runtime.Data.IRowCursor[])">
            <summary>
            Create a consolidated cursor from the given parallel cursor set.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ValueGetter`1">
            <summary>
            Delegate type to get a value. This can used for efficient access to data in an IRow
            or IRowCursor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IRow">
            <summary>
            A logical row. May be a row of an IDataView or a stand-alone row. If/when its contents
            change, its ICounted.Counter value is incremented.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IRow.IsColumnActive(System.Int32)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IRow.GetGetter``1(System.Int32)">
            <summary>
            Returns a value getter delegate to fetch the given column value from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this row's schema's
            <see cref="M:Microsoft.ML.Runtime.Data.ISchema.GetColumnType(System.Int32)"/> on <paramref name="col"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IRowCursor">
            <summary>
            A cursor through rows of an <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. Note that this includes/is an
            <see cref="T:Microsoft.ML.Runtime.Data.IRow"/>, as well as an <see cref="T:Microsoft.ML.Runtime.Data.ICursor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ISchemaBindableMapper">
            <summary>
            A mapper that can be bound to a <see cref="T:Microsoft.ML.Runtime.Data.RoleMappedSchema"/> (which is an ISchema, with mappings from column kinds
            to columns). Binding an <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBindableMapper"/> to a <see cref="T:Microsoft.ML.Runtime.Data.RoleMappedSchema"/> produces an 
            <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/>, which is an interface that has methods to return the names and indices of the input columns
            needed by the mapper to compute its output. The <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper"/> is an extention to this interface, that
            can also produce an output IRow given an input IRow. The IRow produced generally contains only the output columns of the mapper, and not 
            the input columns (but there is nothing preventing an <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper"/> from mapping input columns directly to outputs).
            This interface is implemented by wrappers of IValueMapper based predictors, which are predictors that take a single 
            features column. New predictors can implement <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBindableMapper"/> directly. Implementing <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBindableMapper"/>
            includes implementing a corresponding <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/> (or <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper"/>) and a corresponding ISchema
            for the output schema of the <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/>. In case the <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper"/> interface is implemented, 
            the SimpleRow class can be used in the <see cref="M:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper.GetOutputRow(Microsoft.ML.Runtime.Data.IRow,System.Func{System.Int32,System.Boolean},System.Action@)"/> method.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper">
            <summary>
            This interface is used to map a schema from input columns to output columns. The <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/> should keep track
            of the input columns that are needed for the mapping.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ISchemaBoundMapper.InputSchema">
            <summary>
            The <see cref="T:Microsoft.ML.Runtime.Data.RoleMappedSchema"/> that was passed to the <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/> in the binding process.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ISchemaBoundMapper.OutputSchema">
            <summary>
            The output schema of the <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ISchemaBoundMapper.Bindable">
            <summary>
            A property to get back the <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBindableMapper"/> that produced this <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchemaBoundMapper.GetInputColumnRoles">
            <summary>
            This method returns the binding information: which input columns are used and in what roles.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper">
            <summary>
            This interface extends <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundMapper"/> with an additional method: <see cref="M:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper.GetOutputRow(Microsoft.ML.Runtime.Data.IRow,System.Func{System.Int32,System.Boolean},System.Action@)"/>. This method
            takes an input IRow and a predicate indicating which output columns are active, and returns a new IRow 
            containing the output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper.GetDependencies(System.Func{System.Int32,System.Boolean})">
            <summary>
            Given a predicate specifying which output columns are needed, return a predicate
            indicating which input columns are needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper.GetOutputRow(Microsoft.ML.Runtime.Data.IRow,System.Func{System.Int32,System.Boolean},System.Action@)">
            <summary>
            Get an IRow based on the input IRow with the indicated active columns. The active columns are those for which
            predicate(col) returns true. The schema of the returned IRow will be the same as the OutputSchema, but getting 
            values on inactive columns will throw. Null predicates are disallowed.
            The schema of input should match the InputSchema.
            This method creates a live connection between the input IRow and the output IRow. In particular, when the
            getters of the output IRow are invoked, they invoke the getters of the input row and base the output values on 
            the current values of the input IRow. The output IRow values are re-computed when requested through the getters.
            The optional disposer is invoked by the cursor wrapping, when it no longer needs the IRow.
            If no action is needed when the cursor is Disposed, the override should set disposer to null,
            otherwise it should be set to a delegate to be invoked by the cursor's Dispose method. It's best
            for this action to be idempotent - calling it multiple times should be equivalent to calling it once.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IRowToRowMapper">
            <summary>
            This interface maps an input <see cref="T:Microsoft.ML.Runtime.Data.IRow"/> to an output <see cref="T:Microsoft.ML.Runtime.Data.IRow"/>. Typically, the output contains
            both the input columns and new columns added by the implementing class, although some implementations may
            return a subset of the input columns.
            This interface is similar to <see cref="T:Microsoft.ML.Runtime.Data.ISchemaBoundRowMapper"/>, except it does not have any input role mappings,
            so to rebind, the same input column names must be used.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IRowToRowMapper.GetDependencies(System.Func{System.Int32,System.Boolean})">
            <summary>
            Given a predicate specifying which columns are needed, return a predicate
            indicating which input columns are needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IRowToRowMapper.GetRow(Microsoft.ML.Runtime.Data.IRow,System.Func{System.Int32,System.Boolean},System.Action@)">
            <summary>
            Get an IRow based on the input IRow with the indicated active columns. The active columns are those for which
            predicate(col) returns true. Getting values on inactive columns will throw. Null predicates are disallowed.
            The schema of input should match the InputSchema.
            This method creates a live connection between the input IRow and the output IRow. In particular, when the
            getters of the output IRow are invoked, they invoke the getters of the input row and base the output values on 
            the current values of the input IRow. The output IRow values are re-computed when requested through the getters.
            The optional disposer is invoked by the cursor wrapping, when it no longer needs the IRow.
            If no action is needed when the cursor is Disposed, the override should set disposer to null,
            otherwise it should be set to a delegate to be invoked by the cursor's Dispose method. It's best
            for this action to be idempotent - calling it multiple times should be equivalent to calling it once.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ValueMapper`2">
            <summary>
            Delegate type to map/convert a value.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ValueMapper`3">
            <summary>
            Delegate type to map/convert among three values, for example, one input with two
            outputs, or two inputs with one output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IValueMapper">
            <summary>
            Interface for mapping a single input value (of an indicated ColumnType) to
            an output value (of an indicated ColumnType). This interface is commonly implemented
            by predictors. Note that the input and output ColumnTypes determine the proper
            type arguments for GetMapper, but typically contain additional information like
            vector lengths.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IValueMapper.GetMapper``2">
            <summary>
            Get a delegate used for mapping from input to output values. Note that the delegate
            should only be used on a single thread - it should NOT be assumed to be safe for concurrency.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IValueMapperDist">
            <summary>
            Interface for mapping a single input value (of an indicated ColumnType) to an output value
            plus distribution value (of indicated ColumnTypes). This interface is commonly implemented
            by predictors. Note that the input, output, and distribution ColumnTypes determine the proper
            type arguments for GetMapper, but typically contain additional information like
            vector lengths.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IValueMapperDist.GetMapper``3">
            <summary>
            Get a delegate used for mapping from input to output values. Note that the delegate
            should only be used on a single thread - it should NOT be assumed to be safe for concurrency.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.LinkedRootCursorBase`1">
            <summary>
            Base class for a cursor has an input cursor, but still needs to do work on
            MoveNext/MoveMany.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.LinkedRootCursorBase`1.Input">
            <summary>Gets the input cursor.</summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.LinkedRootCursorBase`1.Root">
            <summary>
            Returns the root cursor of the input. It should be used to perform MoveNext or MoveMany operations.
            Note that GetRootCursor() returns "this", NOT Root. Root is used to advance our input, not for
            clients of this cursor. That's why it is protected, not public.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.LinkedRowFilterCursorBase">
            <summary>
            Base class for creating a cursor of rows that filters out some input rows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.LinkedRowFilterCursorBase.Accept">
            <summary>
            Return whether the current input row should be returned by this cursor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.LinkedRowRootCursorBase">
            <summary>
            A base class for a <see cref="T:Microsoft.ML.Runtime.Data.IRowCursor"/> that has an input cursor, but still needs
            to do work on <see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveNext"/>/<see cref="M:Microsoft.ML.Runtime.Data.ICursor.MoveMany(System.Int64)"/>. Note
            that the default <see cref="M:Microsoft.ML.Runtime.Data.LinkedRowRootCursorBase.GetGetter``1(System.Int32)"/> assumes
            that each input column is exposed as an output column with the same column index.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.LinkedRowRootCursorBase.Schema">
            <summary>Gets row's schema.</summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.MetadataUtils">
            <summary>
            Utilities for implementing and using the metadata API of ISchema.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds">
            <summary>
            This class lists the canonical metadata kinds
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.SlotNames">
            <summary>
            Metadata kind for names associated with slots/positions in a vector-valued column.
            The associated metadata type is typically fixed-sized vector of Text.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.KeyValues">
            <summary>
            Metadata kind for values associated with the key indices when the column type's item type
            is a key type. The associated metadata type is typically fixed-sized vector of a primitive
            type. The primitive type is frequently Text, but can be anything.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.ScoreColumnSetId">
            <summary>
            Metadata kind for sets of score columns. The value is typically a KeyType with raw type U4.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.ScoreColumnKind">
            <summary>
            Metadata kind that indicates the prediction kind as a string. E.g. "BinaryClassification". The value is typically a DvText.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.ScoreValueKind">
            <summary>
            Metadata kind that indicates the value kind of the score column as a string. E.g. "Score", "PredictedLabel", "Probability". The value is typically a DvText.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.IsNormalized">
            <summary>
            Metadata kind that indicates if a column is normalized. The value is typically a Bool.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.IsUserVisible">
            <summary>
            Metadata kind that indicates if a column is visible to the users. The value is typically a Bool.
            Not to be confused with IsHidden() that determines if a column is masked.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.HasMissingValues">
            <summary>
            Metadata kind that indicates if a column has missing values. The value is typically a Bool to allow for unknown status.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.TrainingLabelValues">
            <summary>
            Metadata kind for the label values used in training to be used for the predicted label.
            The value is typically a fixed-sized vector of Text.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.MetadataUtils.Kinds.CategoricalSlotRanges">
            <summary>
            Metadata kind that indicates the ranges within a column that are categorical features.
            The value is a vector type of ints with dimension of two. The first dimension 
            represents the number of categorical features and second dimension represents the range
            and is of size two. The range has start and end index(both inclusive) of categorical 
            slots within that column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.MetadataUtils.Const">
            <summary>
            This class holds all pre-defined string values that can be found in canonical metadata
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.MetadataUtils.MetadataGetter`1">
            <summary>
            Helper delegate for marshaling from generic land to specific types. Used by the Marshal method below.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.ExceptGetMetadata">
            <summary>
            Returns a standard exception for responding to an invalid call to GetMetadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.ExceptGetMetadata(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            Returns a standard exception for responding to an invalid call to GetMetadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.Marshal``2(Microsoft.ML.Runtime.Data.MetadataUtils.MetadataGetter{``0},System.Int32,``1@)">
            <summary>
            Helper to marshal a call to GetMetadata{TValue} to a specific type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetNamesType(System.Int32)">
            <summary>
            Returns a vector type with item type text and the given size. The size must be positive.
            This is a standard type for metadata consisting of multiple text values, eg SlotNames.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetCategoricalType(System.Int32)">
            <summary>
            Returns a vector type with item type int and the given size. 
            The range count must be a positive integer.
            This is a standard type for metadata consisting of multiple int values that represent
            categorical slot ranges with in a column.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.MetadataUtils.ScoreColumnSetIdType">
            <summary>
            The type of the ScoreColumnSetId metadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetSlotNamesPair(System.Int32)">
            <summary>
            Returns a key-value pair useful when implementing GetMetadataTypes(col).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetKeyNamesPair(System.Int32)">
            <summary>
            Returns a key-value pair useful when implementing GetMetadataTypes(col). This assumes
            that the values of the key type are Text.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetPair(Microsoft.ML.Runtime.Data.ColumnType,System.String)">
            <summary>
            Given a type and metadata kind string, returns a key-value pair. This is useful when
            implementing GetMetadataTypes(col).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Prepends a params array to an enumerable. Useful when implementing GetMetadataTypes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetMaxMetadataKind(Microsoft.ML.Runtime.Data.ISchema,System.Int32@,System.String,System.Func{Microsoft.ML.Runtime.Data.ISchema,System.Int32,System.Boolean})">
            <summary>
            Returns the max value for the specified metadata kind.
            The metadata type should be a KeyType with raw type U4.
            colMax will be set to the first column that has the max value for the specified metadata.
            If no column has the specified metadata, colMax is set to -1 and the method returns zero.
            The filter function is called for each column, passing in the schema and the column index, and returns
            true if the column should be considered, false if the column should be skipped.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetColumnSet(Microsoft.ML.Runtime.Data.ISchema,System.String,System.UInt32)">
            <summary>
            Returns the set of column ids which match the value of specified metadata kind.
            The metadata type should be a KeyType with raw type U4.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.GetColumnSet(Microsoft.ML.Runtime.Data.ISchema,System.String,System.String)">
            <summary>
            Returns the set of column ids which match the value of specified metadata kind.
            The metadata type should be of type text.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.HasSlotNames(Microsoft.ML.Runtime.Data.ISchema,System.Int32,System.Int32)">
            <summary>
            Returns <c>true</c> if the specified column:
             * is a vector of length N (including 0)
             * has a SlotNames metadata
             * metadata type is VBuffer&lt;DvText&gt; of length N
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.TryGetMetadata``1(Microsoft.ML.Runtime.Data.ISchema,Microsoft.ML.Runtime.Data.PrimitiveType,System.String,System.Int32,``0@)">
            <summary>
            Tries to get the metadata kind of the specified type for a column.
            </summary>
            <typeparam name="T">The raw type of the metadata, should match the PrimitiveType type</typeparam>
            <param name="schema">The schema</param>
            <param name="type">The type of the metadata</param>
            <param name="kind">The metadata kind</param>
            <param name="col">The column</param>
            <param name="value">The value to return, if successful</param>
            <returns>True if the metadata of the right type exists, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.IsHidden(Microsoft.ML.Runtime.Data.ISchema,System.Int32)">
            <summary>
            Return whether the given column index is hidden in the given schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.MetadataUtils.TryGetCategoricalFeatureIndices(Microsoft.ML.Runtime.Data.ISchema,System.Int32,System.Int32[]@)">
            <summary>
            The categoricalFeatures is a vector of the indices of categorical features slots. 
            This vector should always have an even number of elements, and the elements should be parsed in groups of two consecutive numbers.
            So if its value is the range of numbers: 0,2,3,4,8,9
            look at it as [0,2],[3,4],[8,9].
            The way to interpret that is: feature with indices 0, 1, and 2 are one categorical
            Features with indices 3 and 4 are another categorical. Features 5 and 6 don't appear there, so they are not categoricals. 
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting">
            <summary>
            The progress reporting classes used by <see cref="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1"/> descendants.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel">
            <summary>
            The progress channel for <see cref="T:Microsoft.ML.Runtime.Data.TlcEnvironment"/>.
            This is coupled with a <see cref="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker"/> that aggregates all events and returns them on demand.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel._headerAndAction">
            <summary>
            The pair of (header, fill action) is updated atomically.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel._tracker">
            <summary>
            Normally this should be readonly field, but we want to null it in Dispose to prevent memory leaking.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel.#ctor(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker,System.String)">
            <summary>
            Initialize a <see cref="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel"/> for the process identified by <paramref name="computationName"/>.
            </summary>
            <param name="ectx">The exception context.</param>
            <param name="tracker">The tracker to couple with.</param>
            <param name="computationName">The computation name.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel.GetProgress">
            <summary>
            Pull the current progress by invoking the fill delegate, if any.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel.SubChannel">
            <summary>
            This is a 'derived' or 'subordinate' progress channel.
            
            The subordinates' Start/Stop events and checkpoints will not be propagated. 
            When the status is requested, all of the subordinate channels are also invoked,
            and the resulting metrics are then returned in the order of their 'subordinate level'.
            If there's more than one channel with the same level, the order is not defined.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel.SubChannel._headerAndAction">
            <summary>
            The pair of (header, fill action) is updated atomically.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressChannel.SubChannel.GetProgress">
            <summary>
            Pull the current progress by invoking the fill delegate, if any.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker">
            <summary>
            This class listens to the progress reporting channels, caches all checkpoints and
            start/stop events and, on demand, requests current progress on all active calculations.
            
            The public methods of this class should only be called from one thread.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker._pendingEvents">
            <summary>
            Log of pending events.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker._infos">
            <summary>
            For each calculation, its properties.
            This list is protected by <see cref="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker._lock"/>, and it's updated every time a new calculation starts.
            The entries are cleaned up when the start and stop events are reported (that is, after the first 
            pull request after the calculation's 'Stop' event).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker._index">
            <summary>
            This is a 'process index' that gets incremented whenever a new calculation is started.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker._namesUsed">
            <summary>
            The set of used process names.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker.CalculationInfo">
            <summary>
            This class is an 'event log' for one calculation. 
            
            Every time a calculation is 'started', it gets its own log, so if there are multiple 'start' calls,
            there will be multiple logs.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker.CalculationInfo.Index">
            <summary>
            Auto-assigned index to serve as a unique ID.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker.CalculationInfo.Name">
            <summary>
            Name is auto-modified from the calculation name provided by the pipe.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker.CalculationInfo.PendingCheckpoints">
            <summary>
            A log of pending checkpoint entries.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker.CalculationInfo.IsFinished">
            <summary>
            Whether the calculation has finished.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker.GetAllProgress">
            <summary>
            Get progress reports from all current calculations. 
            For every calculation the following events will be returned:
            * A start event.
            * Each checkpoint.
            * If the calculation is finished, the stop event. 
            
            Each of the above events will be returned exactly once.
            If, for one calculation, there's no events in the above categories, the tracker will
            request ('pull') the current progress and return this as an event.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry">
            <summary>
            An array-backed implementation of <see cref="T:Microsoft.ML.Runtime.IProgressEntry"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.Header">
            <summary>
            The header (names of metrics and units).
            The contents of the header should be treated as read-only. The calculation itself doesn't even
            need to access the header, since it will know it anyway.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.IsCheckpoint">
            <summary>
            Whether the progress entry is a 'checkpoint' (that is, it's being pushed by the component).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.Progress">
            <summary>
            The actual progress (amount of completed units), in the units that are contained in the header.
            Parallel to the header's <see cref="F:Microsoft.ML.Runtime.ProgressHeader.UnitNames"/>. Null value indicates 'not applicable now'.
            
            The computation should not modify these arrays directly, and instead rely on <see cref="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.SetMetric(System.Int32,System.Double)"/>,
            <see cref="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.SetProgress(System.Int32,System.Double)"/> and <see cref="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.SetProgress(System.Int32,System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.ProgressLim">
            <summary>
            The lim values of each progress unit. 
            Parallel to the header's <see cref="F:Microsoft.ML.Runtime.ProgressHeader.UnitNames"/>. Null value indicates unbounded or unknown.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.Metrics">
            <summary>
            The reported metrics. Parallel to the header's <see cref="F:Microsoft.ML.Runtime.ProgressHeader.MetricNames"/>.
            Null value indicates unknown.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.SetProgress(System.Int32,System.Double)">
            <summary>
            Set the progress value for the index <paramref name="index"/> to <paramref name="value"/>,
            and the limit value for the progress becomes 'unknown'.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.SetProgress(System.Int32,System.Double,System.Double)">
            <summary>
            Set the progress value for the index <paramref name="index"/> to <paramref name="value"/>,
            and the limit value to <paramref name="lim"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.SetMetric(System.Int32,System.Double)">
            <summary>
            Sets the metric with index <paramref name="index"/> to <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEntry.#ctor(System.Boolean,Microsoft.ML.Runtime.ProgressHeader)">
            <summary>
            Creates the progress entry corresponding to a given header.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressEvent">
            <summary>
            An event about calculation progress. It could be either start/stop of the calculation, or a progress entry.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ColumnInfo">
            <summary>
            This contains information about a column in an IDataView. It is essentially a convenience
            cache containing the name, column index, and column type for the column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ColumnInfo.CreateFromName(Microsoft.ML.Runtime.Data.ISchema,System.String,System.String)">
            <summary>
            Create a ColumnInfo for the column with the given name in the given schema. Throws if the name
            doesn't map to a column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ColumnInfo.TryCreateFromName(Microsoft.ML.Runtime.Data.ISchema,System.String,Microsoft.ML.Runtime.Data.ColumnInfo@)">
            <summary>
            Tries to create a ColumnInfo for the column with the given name in the given schema. Returns
            false if the name doesn't map to a column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ColumnInfo.CreateFromIndex(Microsoft.ML.Runtime.Data.ISchema,System.Int32)">
            <summary>
            Creates a ColumnInfo for the column with the given column index. Note that the name
            of the column might actually map to a different column, so this should be used with care
            and rarely.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.RoleMappedSchema">
            <summary>
            Encapsulates an ISchema plus column role mapping information. It has convenience fields for
            several common column roles, but can hold an arbitrary set of column infos. The convenience
            fields are non-null iff there is a unique column with the corresponding role. When there are
            no such columns or more than one such column, the field is null. The Has, HasUnique, and
            HasMultiple methods provide some cardinality information.
            Note that all columns assigned roles are guaranteed to be non-hidden in this schema.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Schema">
            <summary>
            The source ISchema.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Feature">
            <summary>
            The Feature column, when there is exactly one (null otherwise).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Label">
            <summary>
            The Label column, when there is exactly one (null otherwise).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Group">
            <summary>
            The Group column, when there is exactly one (null otherwise).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Weight">
            <summary>
            The Weight column, when there is exactly one (null otherwise).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Name">
            <summary>
            The Name column, when there is exactly one (null otherwise).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedSchema.Id">
            <summary>
            The Id column, when there is exactly one (null otherwise).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.Has(Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole)">
            <summary>
            Returns whether there are any columns with the given column role.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.HasUnique(Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole)">
            <summary>
            Returns whether there is exactly one column of the given role.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.HasMultiple(Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole)">
            <summary>
            Returns whether there are two or more columns of the given role.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.GetColumns(Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole)">
            <summary>
            If there are columns of the given role, this returns the infos as a readonly list. Otherwise,
            it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.GetColumnRoles">
            <summary>
            An enumerable over all role-column associations within this object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.GetColumnRoleNames">
            <summary>
            An enumerable over all role-column associations within this object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.GetColumnRoleNames(Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole)">
            <summary>
            An enumerable over all role-column associations for the given role. This is a helper function
            for implementing the <see cref="M:Microsoft.ML.Runtime.Data.ISchemaBoundMapper.GetInputColumnRoles"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.Create(Microsoft.ML.Runtime.Data.ISchema)">
            <summary>
            Creates a RoleMappedSchema from the given schema with no column role assignments.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.Create(Microsoft.ML.Runtime.Data.ISchema,System.Collections.Generic.KeyValuePair{Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole,System.String}[])">
            <summary>
            Creates a RoleMappedSchema from the given schema and role/column-name pairs.
            This skips null or empty column-names.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.Create(Microsoft.ML.Runtime.Data.ISchema,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole,System.String}})">
            <summary>
            Creates a RoleMappedSchema from the given schema and role/column-name pairs.
            This skips null or empty column-names.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedSchema.CreateOpt(Microsoft.ML.Runtime.Data.ISchema,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole,System.String}})">
            <summary>
            Creates a RoleMappedSchema from the given schema and role/column-name pairs.
            This skips null or empty column-names, or column-names that are not found in the schema.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.RoleMappedData">
            <summary>
            Encapsulates an IDataView plus a corresponding RoleMappedSchema. Note that the schema of the
            RoleMappedSchema is guaranteed to be the same schema of the IDataView, that is,
            Data.Schema == Schema.Schema.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedData.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.RoleMappedData.Schema">
            <summary>
            The role mapped schema. Note that Schema.Schema is guaranteed to be the same as Data.Schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedData.Create(Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Creates a RoleMappedData from the given data with no column role assignments.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedData.Create(Microsoft.ML.Runtime.Data.IDataView,System.Collections.Generic.KeyValuePair{Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole,System.String}[])">
            <summary>
            Creates a RoleMappedData from the given schema and role/column-name pairs.
            This skips null or empty column-names.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedData.Create(Microsoft.ML.Runtime.Data.IDataView,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole,System.String}})">
            <summary>
            Creates a RoleMappedData from the given schema and role/column-name pairs.
            This skips null or empty column-names.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RoleMappedData.CreateOpt(Microsoft.ML.Runtime.Data.IDataView,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.ML.Runtime.Data.RoleMappedSchema.ColumnRole,System.String}})">
            <summary>
            Creates a RoleMappedData from the given schema and role/column-name pairs.
            This skips null or empty column-names, or column-names that are not found in the schema.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.RootCursorBase">
            <summary>
            Base class for creating a cursor with default tracking of <see cref="P:Microsoft.ML.Runtime.Data.RootCursorBase.Position"/> and <see cref="P:Microsoft.ML.Runtime.Data.RootCursorBase.State"/>
            with a default implementation of <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveManyCore(System.Int64)"/> (call <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveNextCore"/> repeatedly).
            This cursor base class returns "this" from <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.GetRootCursor"/>. That is, all
            <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveNext"/>/<see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveMany(System.Int64)"/> calls will be seen by this cursor. For a cursor
            that has an input cursor and does NOT need notification on <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveNext"/>/<see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveMany(System.Int64)"/>,
            use <see cref="T:Microsoft.ML.Runtime.Data.SynchronizedCursorBase`1"/> .
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.RootCursorBase.Position">
            <summary>
            Zero-based position of the cursor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.RootCursorBase.IsGood">
            <summary>
            Convenience property for checking whether the current state of the cursor is <see cref="F:Microsoft.ML.Runtime.Data.CursorState.Good"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RootCursorBase.#ctor(Microsoft.ML.Runtime.IChannelProvider)">
            <summary>
            Creates an instance of the RootCursorBase class
            </summary>
            <param name="provider">Channel provider</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveManyCore(System.Int64)">
            <summary>
            Default implementation is to simply call MoveNextCore repeatedly. Derived classes should
            override if they can do better.
            </summary>
            <param name="count">The number of rows to move forward.</param>
            <returns>Whether the move forward is on a valid row</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveNextCore">
            <summary>
            Core implementation of <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveNext"/>, called if the cursor state is not
            <see cref="F:Microsoft.ML.Runtime.Data.CursorState.Done"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.RootCursorBase.GetRootCursor">
            <summary>
            Returns a cursor that can be used for invoking <see cref="P:Microsoft.ML.Runtime.Data.RootCursorBase.Position"/>, <see cref="P:Microsoft.ML.Runtime.Data.RootCursorBase.State"/>,
            <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveNext"/>, and <see cref="M:Microsoft.ML.Runtime.Data.RootCursorBase.MoveMany(System.Int64)"/>, with results identical to calling
            those on this cursor. Generally, if the root cursor is not the same as this cursor, using
            the root cursor will be faster.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.SynchronizedCursorBase`1">
            <summary>
            Base class for creating a cursor on top of another cursor that does not add or remove rows.
            It forces one-to-one correspondence between items in the input cursor and this cursor.
            It delegates all ICursor functionality except Dispose() to the root cursor.
            Dispose is virtual with the default implementation delegating to the input cursor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.SynchronizedCursorBase`1.IsGood">
            <summary>
            Convenience property for checking whether the current state is CursorState.Good.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.TypeUtils">
            <summary>
            Utilities for IDV standard types, including proper NA semantics.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.UInt128">
            <summary>
            A sixteen-byte unsigned integer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.UInt128.Fork">
            <summary>
            An operation that treats the value as an unmixed Murmur3 128-bit hash state,
            and returns the hash state that would result if we hashed an addition 16 bytes
            that were all zeros, except for the last bit which is one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.UInt128.Next">
            <summary>
            An operation that treats the value as an unmixed Murmur3 128-bit hash state,
            and returns the hash state that would result if we hashed an addition 16 bytes
            that were all zeros.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.UInt128.Combine(Microsoft.ML.Runtime.Data.UInt128)">
            <summary>
            An operation that treats the value as an unmixed Murmur3 128-bit hash state,
            and returns the hash state that would result if we took <paramref name="other"/>,
            scrambled it using <see cref="M:Microsoft.ML.Runtime.Data.UInt128.Fork"/>, then hashed the result of that.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.VBuffer`1">
            <summary>
            A buffer that supports both dense and sparse representations. This is the
            representation type for all VectorType instances. When an instance of this
            is passed to a row cursor getter, the callee is free to take ownership of
            and re-use the arrays (Values and Indices).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.VBuffer`1.Length">
            <summary>
            The logical length of the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.VBuffer`1.Count">
            <summary>
            The number of items explicitly represented. This is == Length when the representation
            is dense and &lt; Length when sparse.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.VBuffer`1.Values">
            <summary>
            The values. Only the first Count of these are valid.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.VBuffer`1.Indices">
            <summary>
            The indices. For a dense representation, this array is not used. For a sparse representation
            it is parallel to values and specifies the logical indices for the corresponding values.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.VBuffer`1.IsDense">
            <summary>
            Equivalent to Count == Length.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.#ctor(System.Int32,`0[],System.Int32[])">
            <summary>
            Construct a dense representation with unused Indices array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.#ctor(System.Int32,System.Int32,`0[],System.Int32[])">
            <summary>
            Construct a possibly sparse representation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.CopyToDense(Microsoft.ML.Runtime.Data.VBuffer{`0}@)">
            <summary>
            Copy from this buffer to the given destination, forcing a dense representation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.CopyTo(Microsoft.ML.Runtime.Data.VBuffer{`0}@)">
            <summary>
            Copy from this buffer to the given destination.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.CopyTo(Microsoft.ML.Runtime.Data.VBuffer{`0}@,System.Int32,System.Int32)">
            <summary>
            Copy a range of values from this buffer to the given destination.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.CopyTo(Microsoft.ML.Runtime.Data.VBuffer{`0}@,System.Int32[],System.Int32)">
            <summary>
            Copy from this buffer to the given destination, making sure to explicitly include the
            first count indices in indicesInclude. Note that indicesInclude should be sorted
            with each index less than this.Length. Note that this can make the destination be
            dense even if "this" is sparse.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.CopyTo(`0[])">
            <summary>
            Copy from this buffer to the given destination array. This "densifies".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.VBuffer`1.Copy(`0[],System.Int32,Microsoft.ML.Runtime.Data.VBuffer{`0}@,System.Int32)">
            <summary>
            Copy from a section of a source array to the given destination.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ChannelProviderBase">
            <summary>
            Base class for channel providers. This is a common base class for<see cref="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1"/>.
            The ParentFullName, ShortName, and FullName may be null or empty.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.ChannelProviderBase.ExceptionContextKeys">
            <summary>
            Data keys that are attached to the exception thrown via the exception context.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ChannelProviderBase.Depth">
            <summary>
            The channel depth, NOT host env depth.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.ChannelProviderBase.ContextDescription">
            <summary>
            ExceptionContext description.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.ChannelProviderBase.GenerateFullName">
            <summary>
            Override this method to change the way full names are constructed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IMessageSource">
            <summary>
            Message source (a channel) that generated the message being dispatched.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.IMessageDispatcher">
            <summary>
            A <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> that is also a channel listener can attach
            listeners for messages, as sent through <see cref="M:Microsoft.ML.Runtime.IChannelProvider.StartPipe``1(System.String)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IMessageDispatcher.AddListener``1(System.Action{Microsoft.ML.Runtime.Data.IMessageSource,``0})">
            <summary>
            Listen on this environment to messages of a particular type.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="listenerFunc">The action to perform when a message of the
            appropriate type is received.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.IMessageDispatcher.RemoveListener``1(System.Action{Microsoft.ML.Runtime.Data.IMessageSource,``0})">
            <summary>
            Removes a previously added listener.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="listenerFunc">The previous listener function that is now being removed.</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1">
            <summary>
            A basic host environment suited for many environments.
            This also supports modifying the concurrency factor, provides the ability to subscribe to pipes via the 
            AddListener/RemoveListener methods, and exposes the <see cref="T:Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker"/> to
            query progress.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.HostBase">
            <summary>
            Base class for hosts. Classes derived from  <see cref="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1"/> may choose
            to provide their own host class that derives from this class.
            This encapsulates the random number generator and name information.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.PipeBase`1">
            <summary>
            Base class for implementing <see cref="T:Microsoft.ML.Runtime.IPipe`1"/>. Deriving classes can optionally override
            the Done() and the DisposeCore() methods. If no overrides are needed, the sealed class
            <see cref="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Pipe`1"/> may be used.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.PipeBase`1.IsActive">
            <summary>
            Whether this pipe is still active.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.ChannelBase">
            <summary>
            A base class for <see cref="T:Microsoft.ML.Runtime.IChannel"/> implementations. A message is dispatched as a
            <see cref="T:Microsoft.ML.Runtime.ChannelMessage"/>. Deriving classes can optionally override the Done() and the
            DisposeCore() methods.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Pipe`1">
            <summary>
            An optional implementation of <see cref="T:Microsoft.ML.Runtime.IPipe`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispatcher">
            <summary>
            Base class for <see cref="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispatcher`1"/>. The master host environment has a
            map from <see cref="T:System.Type"/> to <see cref="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispatcher"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispatcher`1">
            <summary>
            Strongly typed dispatcher class.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispatcher`1._listenerAction">
            <summary>
            This field is actually used as a <see cref="T:System.MulticastDelegate"/>, which holds the listener actions
            for all listeners that are currently subscribed. The action itself is an immutable object, so every time
            any listener subscribes or unsubscribes, the field is replaced with a modified version of the delegate.
            
            The field can be null, if no listener is currently subscribed.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispatcher`1._dispatch">
            <summary>
            The dispatch delegate invokes the current dispatching action (wchch calls all current listeners).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.ConcurrencyFactor">
            <summary>
            This host environment supports changing this value dynamically.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.#ctor(Microsoft.ML.Runtime.IRandom,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
             The main constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.#ctor(Microsoft.ML.Runtime.Data.HostEnvironmentBase{`0},Microsoft.ML.Runtime.IRandom,System.Boolean,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This constructor is for forking.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.Dispose">
            <summary>
            Dispose the environment. This ensures that all temp file handles are properly disposed,
            including deleting the physical files.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.OpenInputFileCore(Microsoft.ML.Runtime.IHostEnvironment,System.String)">
            <summary>
            This "opens" the input file handle. The default implementation assumes the file resides in the
            file system and it does not access the physical file until a read stream is opened on the returned
            file handle.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.CreateOutputFileCore(Microsoft.ML.Runtime.IHostEnvironment,System.String)">
            <summary>
            This "creates" the output file handle. The default implementation assumes the file resides in the
            file system and it does not create the physical file until a write stream is opened on the returned
            file handle.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.CreateAndRegisterTempFile(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            This calls CreateTempFileCore and handles registering the temp file for cleanup when the environment is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.HasBadFileCharacters(System.String)">
            <summary>
            Returns true if the given string is non-null and contains invalid file name characters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.EnsureDispatcher``1">
            <summary>
            This method is called when a channel is created and when a listener is registered.
            This method is not invoked on every message.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.HostEnvironmentBase`1.PrintMessageNormalized(System.IO.TextWriter,System.String,System.Boolean,System.String)">
            <summary>
            Line endings in message may not be normalized, this method provides normalized printing.
            </summary>
            <param name="writer">The text writer to write to.</param>
            <param name="message">The message, which if it contains newlines will be normalized.</param>
            <param name="removeLastNewLine">If false, then two newlines will be printed at the end,
            making messages be bracketed by blank lines. If true then only the single newline at the
            end of a message is printed.</param>
            <param name="prefix">A prefix that will be written to every line, except the first line.
            If <paramref name="message"/> contains no newlines then this prefix will not be
            written at all. This prefix is not written to the newline written if
            <paramref name="removeLastNewLine"/> is false.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.TlcEnvironment.ConsoleWriter.GetAndPrintAllProgress(Microsoft.ML.Runtime.Data.ProgressReporting.ProgressTracker)">
            <summary>
            Query all progress and:
            * If there's any checkpoint/start/stop event, print all of them.
            * If there's none, print a dot.
            * If there's <see cref="F:Microsoft.ML.Runtime.Data.TlcEnvironment.ConsoleWriter._maxDots"/> dots, print the current status for all running calculations.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.TlcEnvironment.ConsoleWriter.EnsureNewLine(System.Boolean)">
            <summary>
            If we printed any dots so far, finish the line. This call is expected to be protected by _lock.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.TlcEnvironment.ConsoleWriter.PrintDot">
            <summary>
            Print a progress dot. Returns whether it is 'time' to print more info. This call is expected
            to be protected by _lock.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.TlcEnvironment.#ctor(Microsoft.ML.Runtime.IRandom,System.Boolean,Microsoft.ML.Runtime.MessageSensitivity,System.Int32,System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            This takes ownership of the random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.TlcEnvironment.PrintProgress">
            <summary>
            Pull running calculations for their progress and output all messages to the console.
            If no messages are available, print a dot.
            If a specified number of dots are printed, print an ad-hoc status of all running calculations.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Data.TlcEnvironment.RedirectChannelOutput(System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Redirects the channel output through the specified writers.
            </summary>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="T:Microsoft.ML.Runtime.Command.SignatureCommand">
            <summary>
            The signature for commands.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IFileHandle">
            <summary>
            A file handle.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IFileHandle.CanWrite">
            <summary>
            Returns whether CreateWriteStream is expected to succeed. Typically, once
            CreateWriteStream has been called once, this will forever more return false.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IFileHandle.CanRead">
            <summary>
            Returns whether OpenReadStream is expected to succeed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IFileHandle.CreateWriteStream">
            <summary>
            Create a writable stream for this file handle.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IFileHandle.OpenReadStream">
            <summary>
            Open a readable stream for this file handle.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.SimpleFileHandle">
            <summary>
            A simple disk-based file handle.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IChannelProvider">
            <summary>
            A channel provider can create new channels and generic information pipes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IChannelProvider.Start(System.String)">
            <summary>
            Start a standard message channel.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IChannelProvider.StartPipe``1(System.String)">
            <summary>
            Start a generic information pipe.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IHostEnvironment">
            <summary>
            The host environment interface creates hosts for components. Note that the methods of
            this interface should be called from the main thread for the environment. To get an environment
            to service another thread, call Fork and pass the return result to that thread.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IHostEnvironment.Register(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Create a host with the given registration name.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IHostEnvironment.ConcurrencyFactor">
            <summary>
            How much concurrency the component should use. A value of 1 means
            single-threaded. Higher values generally mean number of threads. Less
            than 1 means whatever the component views as ideal.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IHostEnvironment.IsCancelled">
            <summary>
            Flag which indicate should we stop any code execution in this host.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IHostEnvironment.OpenInputFile(System.String)">
            <summary>
            Return a file handle for an input "file".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IHostEnvironment.CreateOutputFile(System.String)">
            <summary>
            Create an output "file" and return a handle to it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IHostEnvironment.CreateTempFile(System.String,System.String)">
            <summary>
            Create a temporary "file" and return a handle to it. Generally temp files are expected to be
            written to exactly once, and then can be read multiple times.
            Note that IFileHandle derives from IDisposable. Clients may dispose the IFileHandle when it is
            no longer needed, but they are not required to. The host environment should track all temp file
            handles and ensure that they are disposed properly when the environment is "shut down".
            
            The suffix and prefix are optional. A common use for suffix is to specify an extension, eg, ".txt".
            The use of suffix and prefix, including whether they have any affect, is up to the host enviroment.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IHost">
            <summary>
            A host is coupled to a component and provides random number generation and concurrency guidance.
            Note that the random number generation, like the host environment methods, should be accessed only
            from the main thread for the component.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IHost.Rand">
            <summary>
            The random number generator issued to this component. Note that random number
            generators are NOT thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IHost.StopExecution">
            <summary>
            Signal to stop exection in this host and all its children.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IPipe`1">
            <summary>
            A generic information pipe. Note that pipes are disposable. Generally, Done should
            be called before disposing to signal a normal shut-down of the pipe, as opposed
            to an aborted completion.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IPipe`1.Send(`0)">
            <summary>
            The caller relinquishes ownership of the <paramref name="msg"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IPipe`1.Done">
            <summary>
            Called to indicate a normal shut-down of the pipe before disposing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ChannelMessageKind">
            <summary>
            The kinds of standard channel messages.
            Note: These values should never be changed. We can add new kinds, but don't change these values.
            Other code bases, including native code for other projects depends on these values.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.MessageSensitivity">
            <summary>
            A flag that can be attached to a message or exception to indicate that
            it has a certain class of sensitive data. By default, messages should be
            specified as being of unknown sensitivity, which is to say, every
            sensitivity flag is turned on, corresponding to <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            Messages that are totally safe should be marked as <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.None"/>.
            However, if, say, one prints out data from a file (for example, this might
            be done when expressing parse errors), it should be flagged in that case
            with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.UserData"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.MessageSensitivity.None">
            <summary>
            For non-sensitive data.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.MessageSensitivity.UserData">
            <summary>
            For messages that may contain user-data from data files.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.MessageSensitivity.Schema">
            <summary>
            For messages that contain information like column names from datasets.
            Note that, despite being part of the schema, metadata should be treated
            as user data, since it is often derived from user data. Note also that
            types, despite being part of the schema, are not considered "sensitive"
            as such, in the same way that column names might be.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown">
            <summary>
            The default value, unknown, is treated as if everything is sensitive.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.MessageSensitivity.All">
            <summary>
            An alias for <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>, so it is functionally the same, except
            semantically it communicates the idea that we want all bits set.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ChannelMessage">
            <summary>
            A channel message.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ChannelMessage.Message">
            <summary>
            Line endings may not be normalized.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IChannel">
            <summary>
            A standard communication channel.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.HostExtensions">
            <summary>
            General utility extension methods for objects in the "host" universe, i.e.,
            <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>, <see cref="T:Microsoft.ML.Runtime.IHost"/>, and <see cref="T:Microsoft.ML.Runtime.IChannel"/>
            that do not belong in more specific areas, e.g., <see cref="T:Microsoft.ML.Runtime.Contracts"/> or
            component creation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Trace(Microsoft.ML.Runtime.IChannel,System.String)">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Trace(Microsoft.ML.Runtime.MessageSensitivity,System.String)"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Trace(Microsoft.ML.Runtime.IChannel,System.String,System.Object[])">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Trace(Microsoft.ML.Runtime.MessageSensitivity,System.String,System.Object[])"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Error(Microsoft.ML.Runtime.IChannel,System.String)">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Error(Microsoft.ML.Runtime.MessageSensitivity,System.String)"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Error(Microsoft.ML.Runtime.IChannel,System.String,System.Object[])">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Error(Microsoft.ML.Runtime.MessageSensitivity,System.String,System.Object[])"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Warning(Microsoft.ML.Runtime.IChannel,System.String)">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Warning(Microsoft.ML.Runtime.MessageSensitivity,System.String)"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Warning(Microsoft.ML.Runtime.IChannel,System.String,System.Object[])">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Warning(Microsoft.ML.Runtime.MessageSensitivity,System.String,System.Object[])"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Info(Microsoft.ML.Runtime.IChannel,System.String)">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Info(Microsoft.ML.Runtime.MessageSensitivity,System.String)"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.HostExtensions.Info(Microsoft.ML.Runtime.IChannel,System.String,System.Object[])">
            <summary>
            Convenience variant of <see cref="M:Microsoft.ML.Runtime.IChannel.Info(Microsoft.ML.Runtime.MessageSensitivity,System.String,System.Object[])"/>
            setting <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IMlState">
            <summary>
            Dummy interface to allow reference to the AutoMlState object in the C# API (since AutoMlState 
            has things that reference C# API, leading to circular dependency). Makes state object an opaque
            black box to the graph. The macro itself will then case to the concrete type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IPredictorModel">
            <summary>
            Interface for standard predictor model port type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Save the model to the given stream.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.TransformModel">
            <summary>
            Extract only the transform portion of the predictor model.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Predictor">
            <summary>
            Extract the predictor object out of the predictor model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)">
            <summary>
            Apply the predictor model to the transform model and return the resulting predictor model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.PrepareData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.RoleMappedData@,Microsoft.ML.Runtime.IPredictor@)">
            <summary>
            For a given input data, return role mapped data and the predictor object.
            The scoring entry point will hopefully know how to construct a scorer out of them.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.GetLabelInfo(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.ColumnType@)">
            <summary>
            Returns a string array containing the label names of the label column type predictor was trained on.
            If the training label is a key with text key value metadata, it should return this metadata. The order of the labels should be consistent
            with the key values. Otherwise, it returns null.
            </summary>
            <param name="env"/>
            <param name="labelType">The column type of the label the predictor was trained on.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.GetTrainingSchema(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Returns the RoleMappedSchema that was used in training.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.ITransformModel">
            <summary>
            Interface for standard transform model port type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema">
            <summary>
            The input schema that this transform model was originally instantiated on.
            Note that the schema may have columns that aren't needed by this transform model.
            If an IDataView exists with this schema, then applying this transform model to it
            shouldn't fail because of column type issues.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.OutputSchema">
            <summary>
            The output schema that this transform model was originally instantiated on. The schema resulting
            from <see cref="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)"/> may differ from this, similarly to how
            <see cref="P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema"/> may differ from the schema of dataviews we apply this transform model to.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Apply the transform(s) in the model to the given input data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)">
            <summary>
            Apply the transform(s) in the model to the given transform model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Save the model to the given stream.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.AsRowToRowMapper(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            Returns the transform model as an <see cref="T:Microsoft.ML.Runtime.Data.IRowToRowMapper"/> that can output a row
            given a row with the same schema as <see cref="P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema"/>.
            </summary>
            <returns>The transform model as an <see cref="T:Microsoft.ML.Runtime.Data.IRowToRowMapper"/>. If not all transforms
            in the pipeline are <see cref="T:Microsoft.ML.Runtime.Data.IRowToRowMapper"/> then it returns null.</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IComponentFactory">
            <summary>
            This is a token interface that all component factories must implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IArgsComponent">
            <summary>
            This is a token interface for component classes that don't directly create
            a runtime component, but only need to represent a polymorphic set of arguments.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IComponentFactory`1">
            <summary>
            An interface for creating a component with no extra parameters (other than an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IComponentFactory`2">
            <summary>
            An interface for creating a component when we take one extra parameter (and an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.IComponentFactory`3">
            <summary>
            An interface for creating a component when we take two extra parameters (and an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.EntryPointUtils.CheckInputArgs(Microsoft.ML.Runtime.IExceptionContext,System.Object)">
             <summary>
             Performs checks on an EntryPoint input class equivilent to the checks that are done
             when parsing a JSON EntryPoint graph.
            
             Call this method from EntryPoint methods to ensure that range and required checks are performed
             in a consistent manner when EntryPoints are created directly from code.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.EntryPointUtils.FindColumnOrNull(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.Runtime.Data.ISchema,Microsoft.ML.Runtime.EntryPoints.Optional{System.String})">
            <summary>
            Searches for the given column name in the schema. This method applies a
            common policy that throws an exception if the column is not found
            and the column name was explicitly specified. If the column is not found
            and the column name was not explicitly specified, it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.EntryPointUtils.AsNullable``1(Microsoft.ML.Runtime.EntryPoints.Optional{``0})">
            <summary>
            Converts EntryPoint Optional{T} types into nullable types, with the
            implicit value being converted to the null value.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule">
            <summary>
            This class defines attributes to annotate module inputs, outputs, entry points etc. when defining 
            the module interface.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute">
            <summary>
            An attribute used to annotate the component.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.Name">
            <summary>
            The load name of the component. Must be unique within its kind.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.FriendlyName">
            <summary>
            UI friendly name. Can contain spaces and other forbidden for Name symbols.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.Aliases">
            <summary>
            Alternative names of the component. Each alias must also be unique in the component's kind.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.Alias">
            <summary>
            Comma-separated <see cref="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.Aliases"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.Desc">
            <summary>
            Description of the component.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentAttribute.DocName">
            <summary>
            This should indicate a name of an embedded resource that contains detailed documents
            for the component, e.g., markdown document with the .md extension. The embedded resource
            is assumed to be in the same assembly as the class on which this attribute is ascribed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.ComponentKindAttribute">
            <summary>
            An attribute used to annotate the signature interface.
            Effectively, this is a way to associate the signature interface with a user-friendly name.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointKindAttribute">
            <summary>
            An attribute used to annotate the kind of entry points.
            Typically it is used on the input classes.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.OutputAttribute">
            <summary>
            An attribute used to annotate the outputs of the module.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.OutputAttribute.Name">
            <summary>
            Official name of the output. If it is not specified, the field name is used.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.OutputAttribute.Desc">
            <summary>
            The description of the output.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.OutputAttribute.SortOrder">
            <summary>
            The rank order of the output. Because .NET reflection returns members in an unspecfied order, this 
            is the only way to ensure consistency.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.OptionalInputAttribute">
            <summary>
            An attribute to indicate that a field is optional in an EntryPoint module.
            A node can be run without optional input fields.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.RangeAttribute">
            <summary>
            An attribute used to annotate the valid range of a numeric input.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.RangeAttribute.Type">
            <summary>
            The target type of this range attribute, as determined by the type of
            the set range bound values.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.RangeAttribute.Min">
            <summary>
            An inclusive lower bound of the value.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.RangeAttribute.Max">
            <summary>
            An inclusive upper bound of the value.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.RangeAttribute.Inf">
            <summary>
            An exclusive lower bound of the value.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.RangeAttribute.Sup">
            <summary>
            An exclusive upper bound of the value.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute">
            <summary>
            An attribute used to indicate suggested sweep ranges for parameter sweeping.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableDiscreteParamAttribute">
            <summary>
            An attribute used to indicate suggested sweep ranges for discrete parameter sweeping.
            The value is the index of the option chosen. Use Options[Value] to get the corresponding
            option using the index.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableFloatParamAttribute">
            <summary>
            An attribute used to indicate suggested sweep ranges for float parameter sweeping.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableLongParamAttribute">
            <summary>
            An attribute used to indicate suggested sweep ranges for long parameter sweeping.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointAttribute">
            <summary>
            An attribute to mark an entry point of a module.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointAttribute.Name">
            <summary>
            The entry point name.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointAttribute.Desc">
            <summary>
            The entry point description.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointAttribute.UserName">
            <summary>
            UI friendly name. Can contain spaces and other forbidden for Name symbols.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointAttribute.ShortName">
            <summary>
            Short name of the Entry Point
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.EntryPoints.TlcModule.EntryPointAttribute.Remarks">
            <summary>
            Remarks on the Entry Point, for more extensive XML documentation on the C#API
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind">
            <summary>
            The list of data types that are supported as inputs or outputs.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Unknown">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Int">
            <summary>
            Integer, including long. 
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.UInt">
            <summary>
            Unsigned integer, including ulong. 
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Float">
            <summary>
            Floating point, including double.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Char">
            <summary>
            A char.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Bool">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.DataView">
            <summary>
            A dataset, represented by an <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.FileHandle">
            <summary>
            A file handle, represented by an <see cref="T:Microsoft.ML.Runtime.IFileHandle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.TransformModel">
            <summary>
            A transform model, represented by an <see cref="T:Microsoft.ML.Runtime.EntryPoints.ITransformModel"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.PredictorModel">
            <summary>
            A predictor model, represented by an <see cref="T:Microsoft.ML.Runtime.EntryPoints.IPredictorModel"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Enum">
            <summary>
            An enum: one value of a specified list.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Array">
            <summary>
            An array (0 or more values of the same type, accessible by index). 
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Dictionary">
            <summary>
            A dictionary (0 or more values of the same type, identified by a unique string key). 
            The underlying C# representation is <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.Component">
            <summary>
            A component of a specified kind. The component is identified by the "load name" (unique per kind) and,
            optionally, a set of parameters, unique to each component. Example: "BinaryClassifierEvaluator{threshold=0.5}".
            The C# representation is <see cref="T:Microsoft.ML.Runtime.EntryPoints.IComponentFactory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.TlcModule.DataKind.State">
            <summary>
            An C# object that represents state, such as <see cref="T:Microsoft.ML.Runtime.EntryPoints.IMlState"/>. 
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.Optional">
            <summary>
            The untyped base class for 'maybe'.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.Optional.IsExplicit">
            <summary>
            Whether the value was set 'explicitly', or 'implicitly'.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.Optional`1">
            <summary>
            This is a 'maybe' class that is able to differentiate the cases when the value is set 'explicitly', or 'implicitly'.
            The idea is that if the default value is specified by the user, in some cases it needs to be treated differently
            than if it's auto-filled.
            
            An example is the weight column: the default behavior is to use 'Weight' column if it's present. But if the user explicitly sets 
            the weight column to be 'Weight', we need to actually enforce the presence of the column.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.Optional`1.Implicit(`0)">
            <summary>
            Create the 'implicit' value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.Optional`1.op_Implicit(Microsoft.ML.Runtime.EntryPoints.Optional{`0})~`0">
            <summary>
            The implicit conversion into <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.Optional`1.op_Implicit(`0)~Microsoft.ML.Runtime.EntryPoints.Optional{`0}">
            <summary>
            The implicit conversion from <typeparamref name="T"/>. 
            This will assume that the parameter is set 'explicitly'.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.SignatureEntryPointModule">
            <summary>
            This is a signature for classes that are 'holders' of entry points and components.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.EntryPointModuleAttribute">
            <summary>
            A simplified assembly attribute for marking EntryPoint modules.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog">
            <summary>
            This is a class that contains all entry point and component declarations.
            REVIEW: it looks like a good idea to actually make <see cref="T:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog"/> a part of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>. Currently, this is not the case,
            but this is the plan.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.EntryPointInfo">
            <summary>
            A description of a single entry point.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.ComponentInfo">
            <summary>
            A description of a single component.
            The 'component' is a non-standalone building block that is used to parametrize entry points or other TLC components.
            For example, 'Loss function', or 'similarity calculator' could be components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.AllEntryPoints">
            <summary>
            Get all registered entry points.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog._nameRegex">
            <summary>
            The valid names for the components and entry points must consist of letters, digits, underscores and dots, 
            and begin with a letter or digit.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.CreateInstance(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            Create a module catalog (or reuse the one created before).
            </summary>
            <param name="ectx">The exception context to use to report errors while scanning the assemblies.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.TryFindComponentCaseInsensitive(System.Type,System.String,Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.ComponentInfo@)">
            <summary>
            Akin to <see cref="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.TryFindComponent(System.Type,System.String,Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.ComponentInfo@)"/>, except if the regular (case sensitive) comparison fails, it will
            attempt to back off to a case-insensitive comparison.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.GetAllComponentKinds">
            <summary>
            Returns all valid component kinds.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.GetAllComponents(System.String)">
            <summary>
            Returns all components of the specified kind.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.GetAllComponents(System.Type)">
            <summary>
            Returns all components that implement the specified interface.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IProgressChannelProvider">
            <summary>
            This is a factory interface for <see cref="T:Microsoft.ML.Runtime.IProgressChannel"/>.
            Both <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> and <see cref="T:Microsoft.ML.Runtime.IProgressChannel"/> implement this interface,
            to allow for nested progress reporters.
            
            REVIEW: make <see cref="T:Microsoft.ML.Runtime.IChannelProvider"/> implement this, instead of the environment?
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IProgressChannelProvider.StartProgressChannel(System.String)">
            <summary>
            Create a progress channel for a computation named <paramref name="name"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IProgressChannel">
            <summary>
            A common interface for progress reporting.
            It is expected that the progress channel interface is used from only one thread.
            
            Supported workflow:
            1) Create the channel via <see cref="M:Microsoft.ML.Runtime.IProgressChannelProvider.StartProgressChannel(System.String)"/>.
            2) Call <see cref="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})"/> as many times as desired (including 0). 
                  Each call to <see cref="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})"/> supersedes the previous one.
            3) Report checkpoints (0 or more) by calling <see cref="M:Microsoft.ML.Runtime.IProgressChannel.Checkpoint(System.Nullable{System.Double}[])"/>.
            4) Repeat steps 2-3 as often as necessary.
            5) Dispose the channel.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})">
            <summary>
            Set up the reporting structure:
            - Set the 'header' of the progress reports, defining which progress units and metrics are going to be reported.
            - Provide a thread-safe delegate to be invoked whenever anyone needs to know the progress.
            
            It is acceptable to call <see cref="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})"/> multiple times (or none), regardless of whether the calculation is running
            or not. Because of synchronization, the computation should not deny calls to the 'old' <paramref name="fillAction"/> 
            delegates even after a new one is provided.
            </summary>
            <param name="header">The header object.</param>
            <param name="fillAction">The delegate to provide actual progress. The <see cref="T:Microsoft.ML.Runtime.IProgressEntry"/> parameter of 
            the delegate will correspond to the provided <paramref name="header"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.IProgressChannel.Checkpoint(System.Nullable{System.Double}[])">
            <summary>
            Submit a 'checkpoint' entry. These entries are guaranteed to be delivered to the progress listener,
            if it is interested. Typically, this would contain some intermediate metrics, that are only calculated
            at certain moments ('checkpoints') of the computation.
            
            For example, SDCA may report a checkpoint every time it computes the loss, or LBFGS may report a checkpoint
            every iteration.
            
            The only parameter, <paramref name="values"/>, is interpreted in the following fashion:
            * First MetricNames.Length items, if present, are metrics.
            * Subsequent ProgressNames.Length items, if present, are progress units.
            * Subsequent ProgressNames.Length items, if present, are progress limits.
            * If any more values remain, an exception is thrown.
            </summary>
            <param name="values">The metrics, progress units and progress limits.</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.ProgressHeader">
            <summary>
            This is the 'header' of the progress report.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.ProgressHeader.UnitNames">
            <summary>
            These are the names of the progress 'units', from the least granular to the most granular.
            For example, neural network might have {'epoch', 'example'} and FastTree might have {'tree', 'split', 'feature'}.
            Will never be null, but can be empty.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.ProgressHeader.MetricNames">
            <summary>
            These are the names of the reported metrics. For example, this could be the 'loss', 'weight updates/sec' etc.
            Will never be null, but can be empty.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ProgressHeader.#ctor(System.String[],System.String[])">
            <summary>
            Initialize the header. This will take ownership of the arrays.
            Both arrays can be null, even simultaneously. This 'empty' header indicated that the calculation doesn't report
            any units of progress, but the tracker can still track start, stop and elapsed time. Of course, if there's any
            progress or metrics to report, it is always better to report them.
            </summary>
            <param name="metricNames">The metrics that the calculation reports. These are completely independent, and there
            is no contract on whether the metric values should increase or not. As naming convention, <paramref name="metricNames"/> 
            can have multiple words with spaces, and should be title-cased.</param>
            <param name="unitNames">The names of the progress units, listed from least granular to most granular.
            The idea is that the progress should be lexicographically increasing (like [0,0], [0,10], [1,0], [1,15], [2,5] etc.).
            As naming convention, <paramref name="unitNames"/> should be lower-cased and typically plural 
            (e.g. iterations, clusters, examples). </param>
        </member>
        <member name="M:Microsoft.ML.Runtime.ProgressHeader.#ctor(System.String[])">
            <summary>
            A constructor for no metrics, just progress units. As naming convention, <paramref name="unitNames"/> should be lower-cased 
            and typically plural (e.g. iterations, clusters, examples).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IProgressEntry">
            <summary>
            A metric/progress holder item. 
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IProgressEntry.SetProgress(System.Int32,System.Double)">
            <summary>
            Set the progress value for the index <paramref name="index"/> to <paramref name="value"/>,
            and the limit value for the progress becomes 'unknown'.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IProgressEntry.SetProgress(System.Int32,System.Double,System.Double)">
            <summary>
            Set the progress value for the index <paramref name="index"/> to <paramref name="value"/>,
            and the limit value to <paramref name="lim"/>. If <paramref name="lim"/> is a NAN, it is set to null instead. 
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IProgressEntry.SetMetric(System.Int32,System.Double)">
            <summary>
            Sets the metric with index <paramref name="index"/> to <paramref name="value"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ServerChannel">
            <summary>
            Instances of this class are used to set up a bundle of named delegates. These
            delegates are registered through <see cref="M:Microsoft.ML.Runtime.ServerChannel.Register``1(System.String,System.Func{``0})"/> and its overloads.
            Once all registrations are done, <see cref="M:Microsoft.ML.Runtime.ServerChannel.Publish"/> is called and a message
            of type <see cref="T:Microsoft.ML.Runtime.ServerChannel.Bundle"/> is sent through the input channel
            provider. The intended use case is that any information surfaced through these
            delegates will be published in some fashion, with the target scenario being
            that the library will publish some sort of restful API.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ServerChannel.ThisIfActiveOrNull">
            <summary>
            Returns either this object, or <c>null</c> if there are no listeners on this server
            channel. This can be used in conjunction with the <c>?.</c> operator to have more
            performant though more robust calls to <see cref="M:Microsoft.ML.Runtime.ServerChannel.Register``1(System.String,System.Func{``0})"/> and
            <see cref="M:Microsoft.ML.Runtime.ServerChannel.Publish"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ServerChannel.Start(Microsoft.ML.Runtime.IChannelProvider,System.String)">
            <summary>
            Starts a new server channel.
            </summary>
            <param name="provider">The channel provider, on which to send
            the notification that a server is being constructed</param>
            <param name="identifier">A semi-unique identifier for this
            "bundle" that is being constructed</param>
            <returns>The constructed server channel, or <c>null</c> if there
            was no listeners for server channels registered on <paramref name="provider"/></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.ServerChannel.Publish">
            <summary>
            Finalizes all registrations of delegates, and pipes the bundle of objects
            in a <see cref="T:Microsoft.ML.Runtime.ServerChannel.Bundle"/> up through the pipe to be consumed by any
            listeners.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ServerChannel.IServerFactory">
            <summary>
            Entry point factory for creating <see cref="T:Microsoft.ML.Runtime.ServerChannel.IServer"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ServerChannel.IServer">
             <summary>
             Classes that want to publish the bundles from server channels in some fashion should implement
             this interface. The intended simple use case is that this will be some form of in-process web
             server, and then when disposed, they should stop themselves.
            
             Note that the primary communication with the server from the client code's perspective is not
             through method calls on this interface, but rather communication through an
             <see cref="T:Microsoft.ML.Runtime.IPipe`1"/> that the server will listen to throughout its
             lifetime.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ServerChannel.IServer.BaseAddress">
            <summary>
            This should return the base address where the server is. If this server is not actually
            serving content at any URL, this property should be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ServerChannel.CreateDefaultServerFactoryOrNull(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            Creates what might be considered a good "default" server factory, if possible,
            or <c>null</c> if no good default was possible. A <c>null</c> value could be returned,
            for example, if a user opted to remove all implementations of <see cref="T:Microsoft.ML.Runtime.ServerChannel.IServer"/> and
            the associated <see cref="T:Microsoft.ML.Runtime.ServerChannel.IServerFactory"/> for security reasons.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ServerChannel.IPendingBundleNotification">
            <summary>
            When a <see cref="T:Microsoft.ML.Runtime.ServerChannel"/> is created, the creation method will send an implementation
            is a notification sent through an <see cref="T:Microsoft.ML.Runtime.IPipe`1"/>, to indicate that
            a <see cref="T:Microsoft.ML.Runtime.ServerChannel.Bundle"/> may be pending soon. Listeners that want to receive the bundle to
            expose it, e.g., a web service, should register this interest by passing in an action to be called.
            If no listener registers interest, the server channel that sent the notification will act
            differently by, say, acting as a no-op w.r.t. client calls to it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ServerChannel.IPendingBundleNotification.Acknowledge(System.Action{Microsoft.ML.Runtime.ServerChannel.Bundle})">
            <summary>
            Any publisher of the named delegates will call this method, upon receiving an instance
            of this object through the pipe. This method serves two purposes: firstly it detects
            whether anyone is even interested in publishing anything at all, so that we can just
            ignore any input delegates in the case where no one is listening (which, we must expect,
            is the majority of scenarios). The second is that it provides an action to call, once
            all publishing is complete, and <see cref="M:Microsoft.ML.Runtime.ServerChannel.Publish"/> has been called by the client code.
            </summary>
            <param name="toDo">The callback to perform when all named delegates have been registered,
            and <see cref="M:Microsoft.ML.Runtime.ServerChannel.Publish"/> is called.</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.ServerChannel.Bundle">
            <summary>
            The final bundle of published named delegates that a listener can serve.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.ServerChannel.Bundle.NameToFuncs">
            <summary>
            This contains a name to delegate mappings. The delegates contained herein are gauranteed to be
            some variety of <see cref="T:System.Func`1"/>, <see cref="T:System.Func`2"/>,
            <see cref="T:System.Func`3"/>, etc.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.ServerChannel.Bundle.Identifier">
            <summary>
            This should be a more-or-less unique identifier for the type of API this bundle is producing.
            Its intended use is that it will form part of the URL for the RESTful API, so to the extent that
            it contains multiple tokens they must be slash delimited.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ServerChannelUtilities.StartServerChannel(Microsoft.ML.Runtime.IChannelProvider,System.String)">
            <summary>
            Convenience method for <see cref="M:Microsoft.ML.Runtime.ServerChannel.Start(Microsoft.ML.Runtime.IChannelProvider,System.String)"/> that looks more idiomatic to typical
            channel creation methods on <see cref="T:Microsoft.ML.Runtime.IChannelProvider"/>.
            </summary>
            <param name="provider">The channel provider.</param>
            <param name="identifier">This is an identifier of the "type" of bundle that is being published,
            and should form a path with forward-slash '/' delimiters.</param>
            <returns>The newly created server channel, or <c>null</c> if there was no listener for
            server channels on <paramref name="provider"/>.</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.TelemetryMessage">
            <summary>
            A telemetry message.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.TelemetryTrace">
            <summary>
            Message with one long text and bunch of small properties (limit on value is ~1020 chars)
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.TelemetryException">
            <summary>
            Message with exception
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.TelemetryMetric">
            <summary>
            Message with metric value and it properites
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.PredictionKind">
            <summary>
            Type of prediction task
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IPredictor">
            <summary>
            Weakly typed version of IPredictor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IPredictor.PredictionKind">
            <summary>
            Return the type of prediction task.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IPredictorProducing`1">
            <summary>
            A predictor the produces values of the indicated type.
            REVIEW: Determine whether this is just a temporary shim or long term solution.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IPredictor`2">
            <summary>
            Strongly typed generic predictor that takes data instances (feature containers)
            and produces predictions for them.
            </summary>
            <typeparam name="TFeatures"> Type of features container (instance) on which to make predictions</typeparam>
            <typeparam name="TResult"> Type of prediction result</typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.IPredictor`2.Predict(`0)">
            <summary>
            Produce a prediction for provided features
            </summary>
            <param name="features"> Data instance </param>
            <returns> Prediction </returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.IDistPredictorProducing`2">
            <summary>
            A predictor that produces values and distributions of the indicated types.
            REVIEW: Determine whether this is just a temporary shim or long term solution.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IDistributionPredictor`3">
            <summary>
            Predictor that returns a probability distribution associated with a prediction result
            </summary>
            <typeparam name="TFeatures"> Type of features container (instance) on which to make predictions</typeparam>
            <typeparam name="TResult"> Type of prediction result</typeparam>
            <typeparam name="TResultDistribution"> Type of probability distribution associated  with the predicton</typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.IDistributionPredictor`3.PredictDistribution(`0)">
            <summary>
            Return a probability distribution associated wtih the prediction.
            </summary>
            <param name="features">Data instance</param>
            <returns>Distribution associated with the prediction</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.IDistributionPredictor`3.PredictDistribution(`0,`1@)">
            <summary>
            Return a probability distribution associated wtih the prediction, as well as the prediction.
            </summary>
            <param name="features">Data instance</param>
            <param name="result">Prediction</param>
            <returns>Distribution associated with the prediction</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.IBulkPredictor`4">
            <summary>
              Predictor that produces predictions for sets of instances at a time
              for cases where this is more efficient than serial calls to Predict for each instance.
            </summary>
            <typeparam name="TFeatures"> Type of features container (instance) on which to make predictions</typeparam>
            <typeparam name="TFeaturesCollection"> Type of collection of instances </typeparam>
            <typeparam name="TResult"> Type of prediction result</typeparam>
            <typeparam name="TResultCollection"> Type of the collection of prediction results </typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.IBulkPredictor`4.BulkPredict(`1)">
            <summary>
            Produce predictions for a set of instances
            </summary>
            <param name="featuresCollection">Collection of instances</param>
            <returns>Collection of predictions</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.IBulkDistributionPredictor`6">
            <summary>
            Predictor that can score sets of instances (presumably more efficiently)
            and returns a distribution associated with a prediction result.
            </summary>
            <typeparam name="TFeatures"> Type of features container (instance) on which to make predictions</typeparam>
            <typeparam name="TFeaturesCollection"> Type of collection of instances </typeparam>
            <typeparam name="TResult"> Type of prediction result</typeparam>
            <typeparam name="TResultDistribution"> Type of probability distribution associated  with the predicton</typeparam>
            <typeparam name="TResultCollection"> Type of the collection of prediction results </typeparam>
            <typeparam name="TResultDistributionCollection"> Type of the collection of distributions for prediction results </typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.IBulkDistributionPredictor`6.BulkPredictDistribution(`1)">
            <summary>
            Produce distributions over predictions for a set of instances
            </summary>
            <param name="featuresCollection">Collection of instances</param>
            <returns>Collection of prediction distributions</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.IBulkDistributionPredictor`6.BulkPredictDistribution(`1,`3@)">
            <summary>
            Produce distributions over predictions for a set of instances, along with actual prediction results
            </summary>
            <param name="featuresCollection">Collection of instances</param>
            <param name="resultCollection">Collection of prediction results</param>
            <returns>Collection of distributions associated with prediction results</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.SignatureSweeper">
            <summary>
            Signature for the loaders of sweepers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.SignatureSweepResultEvaluator">
            <summary>
            Signature for the loaders of sweep result evaluators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.SignatureSuggestedSweepsParser">
            <summary>
            Signature for SuggestedSweeps parser.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ISweeper">
            <summary>
            The main interface of the sweeper
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ISweeper.ProposeSweeps(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.ML.Runtime.IRunResult})">
            <summary>
            Returns between 0 and maxSweeps configurations to run.
            It expects a list of previous runs such that it can generate configurations that were not already tried.
            The list of runs can be null if there were no previous runs.
            Some smart sweepers can take advantage of the metric(s) that the caller computes for previous runs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IValueGenerator">
            <summary>
            This is the interface that each type of parameter sweep needs to implement
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IValueGenerator.CreateFromNormalized(System.Double)">
            <summary>
            Given a value in the [0,1] range, return a value for this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IValueGenerator.Item(System.Int32)">
            <summary>
            Used mainly in grid sweepers, return the i-th distinct value for this parameter
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IValueGenerator.Count">
            <summary>
            Used mainly in grid sweepers, return the count of distinct values for this parameter
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IValueGenerator.Name">
            <summary>
            Returns the name of the generated parameter
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IValueGenerator.ToStringParameter(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Returns the string representation of this IValueGenerator in a format used by the Sweeper command
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ISweepResultEvaluator`1.GetRunResult(Microsoft.ML.Runtime.ParameterSet,`0)">
            <summary>
            Return an IRunResult based on the results given as a TResults object.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IParameterValue">
            <summary>
            Parameter value generated from the sweeping.
            The parameter values must be immutable.
            Value is converted to string because the runner will usually want to construct a command line for TL.
            Implementations of this interface must also override object.GetHashCode() and object.Equals(object) so they are consistent
            with IEquatable.Equals(IParameterValue).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IParameterValue`1">
            <summary>
            Type safe version of the IParameterValue interface.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ParameterSet">
            <summary>
            A set of parameter values.
            The parameter set must be immutable.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IRunResult">
            <summary>
            The result of a run.
            Contains the parameter set used, useful for the sweeper to not generate the same configuration multiple times.
            Also contains the result of a run and the metric value that is used by smart sweepers to generate new configurations
            that try to maximize this metric.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.RunResult">
            <summary>
            Simple implementation of IRunResult
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.RunResult.IsMetricMaximizing">
            <summary>
            This switch changes the behavior of the CompareTo function, switching the greater than / less than 
            behavior, depending on if it is set to True. 
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.RunMetric">
            <summary>
            The metric class, used by smart sweeping algorithms.
            Ideally we would like to move towards the new IDataView/ISchematized, this is 
            just a simple view instead, and it is decoupled from RunResult so we can move 
            in that direction in the future.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.RunMetric.PrimaryMetric">
            <summary>
            The primary metric to optimize.
            This metric is usually an aggregate value for the run, e.g. AUC, accuracy etc.
            By default, smart sweeping algorithms will maximize this metric.
            If you want to minimize, either negate this value or change the option in the arguments of the sweeper constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.RunMetric.GetMetricDistribution">
            <summary>
            The (optional) distribution of the metric.
            This distribution can be a secondary measure of how good a run was, e.g per-fold AUC, per-fold accuracy, (sampled) per-instance log loss etc.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.SignatureTrainer">
            <summary>
            Loadable class signatures for trainers. Typically each trainer should register with
            both SignatureTrainer and SignatureXxxTrainer where Xxx is the prediction kind.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ITrainerEx">
            <summary>
            Interface to provide extra information about a trainer.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ITrainerEx.NeedNormalization">
            <summary>
            Whether the trainer needs to see data in normalized form.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ITrainerEx.NeedCalibration">
            <summary>
            Whether the trainer needs calibration to produce probabilities.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ITrainerEx.WantCaching">
            <summary>
            Whether this trainer could benefit from a cached view of the data.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.ITrainer">
            <summary>
            Weakly typed interface for a trainer "session" that produces a predictor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.ITrainer.PredictionKind">
            <summary>
            Return the type of prediction task for the produced predictor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ITrainer.CreatePredictor">
            <summary>
             Returns the trained predictor.
             REVIEW: Consider removing this.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IMetaLinearTrainer">
            <summary>
            Interface implemented by the MetalinearLearners base class.
            Used to distinguish the MetaLinear Learners from the other learners
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.ITrainer`1.Train(`0)">
            <summary>
            Trains a predictor using the specified dataset.
            </summary>
            <param name="data"> Training dataset </param>
        </member>
        <member name="T:Microsoft.ML.Runtime.ITrainer`2">
            <summary>
            Strongly typed generic interface for a trainer. A trainer object takes
            supervision data and produces a predictor.
            </summary>
            <typeparam name="TDataSet"> Type of the training dataset</typeparam>
            <typeparam name="TPredictor"> Type of predictor produced</typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.ITrainer`2.CreatePredictor">
            <summary>
             Returns the trained predictor.
            </summary>
            <returns>Trained predictor ready to make predictions</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.IValidatingTrainer`1">
            <summary>
            Trainers that want data to do their own validation implement this interface.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IValidatingTrainer`1.Train(`0,`0)">
            <summary>
            Trains a predictor using the specified dataset.
            </summary>
            <param name="data">Training dataset</param>
            <param name="validData">Validation dataset</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.IIncrementalTrainer`2.Train(`0,`1)">
            <summary>
            Trains a predictor using the specified dataset and a trained predictor.
            </summary>
            <param name="data">Training dataset</param>
            <param name="predictor">A trained predictor</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.IIncrementalValidatingTrainer`2.Train(`0,`0,`1)">
            <summary>
            Trains a predictor using the specified dataset and a trained predictor.
            </summary>
            <param name="data">Training dataset</param>
            <param name="validData">Validation dataset</param>
            <param name="predictor">A trained predictor</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.TreePredictor.ITreeEnsemble">
            <summary>
            Predictor that has ensemble tree structures and returns collection of trees.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.TreePredictor.ITreeEnsemble.NumTrees">
            <summary>
            Returns the number of trees in the ensemble.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.TreePredictor.ITreeEnsemble.GetTrees">
            <summary>
            Returns the collection of trees.
            </summary>
            <returns>Collection of trees</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.TreePredictor.ITree">
            <summary>
            Type of tree used in ensemble of tree based predictors
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.TreePredictor.ITree.GtChild">
            <summary>
            Returns the array of right(Greater than) child nodes of every interior nodes
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.TreePredictor.ITree.LteChild">
            <summary>
            Returns the array of left(Leser than or equal to) nodes of every interior nodes
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.TreePredictor.ITree.NumNodes">
            <summary>
            returns the number of interior nodes.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.TreePredictor.ITree.NumLeaves">
            <summary>
            Returns the number of leaf nodes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.TreePredictor.ITree.GetNode(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns node structure for the given node
            </summary>
            <param name="nodeId">Node id</param>
            <param name="isLeaf">Flag to denote whether the node is leaf or not</param>
            <param name="featureNames">Feature names collection</param>
            <returns>Node structure</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.TreePredictor.ITree`1">
            <summary>
            Type of tree used in ensemble of tree based predictors
            </summary>
            <typeparam name="TFeatures">Type of features container (instance) on which to make predictions</typeparam>
        </member>
        <member name="M:Microsoft.ML.Runtime.TreePredictor.ITree`1.GetLeaf(`0@)">
            <summary>
            Returns the leaf node for the given instance.
            </summary>
            <param name="features">Type of features container (instance) on which to make predictions</param>
            <returns>node id</returns>
            <typeparamref name="TFeatures">Type of features container (instance) on which to make predictions</typeparamref>
        </member>
        <member name="T:Microsoft.ML.Runtime.TreePredictor.INode">
            <summary>
            Type to represent the structure of node
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.TreePredictor.INode.KeyValues">
            <summary>
            Returns Key value pairs representing the properties of the node.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.TreePredictor.NodeKeys">
            <summary>
            Keys to represent the properties of node.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.SplitName">
            <summary>
            Name of the the interior node. It is Feature name if it is fasttree. Type is string for default trees.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.SplitGain">
            <summary>
            Split gain of the interior node. Type is double for default trees.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.Threshold">
            <summary>
            Threshold value of the interior node. Type is string for default trees.
            It is expected that the string has exactly two space separated components.
            i. The first one should be the operator
            ii. The second one should be the actual threshold
            For ex., for a split like f1 &lt;= 10, expected Threshold is "&lt;= 10"
            For a split like color not-in { blue, green }, expected Threshold is "not-in { blue, green }"
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.GainValue">
            <summary>
            Gain value (specific to fasttree) of the interior node. Type is double for default trees.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.PreviousLeafValue">
            <summary>
            Previous leaf value(specific to fasttree) of the interior node. Type is double for default trees.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.LeafValue">
            <summary>
            Leaf value of the leaf node. Type is double for default trees.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.TreePredictor.NodeKeys.Extras">
            <summary>
            Extra items that will be displayed in the tool-tip. Type is string for default trees.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1">
            <summary>
            An array-like data structure that supports storing more than 
            <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.ArrayMaxSize"/> many entries, up to 0x7FEFFFFF00000L. 
            The entries are indexed by 64-bit integers, and a single entry can be accessed by 
            the indexer if no modifications to the entries is desired, or the <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.ApplyAt(System.Int64,Microsoft.ML.Runtime.Internal.Utilities.BigArray{`0}.Visitor)"/>
            method. Efficient looping can be accomplished by calling the <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.ApplyRange(System.Int64,System.Int64,Microsoft.ML.Runtime.Internal.Utilities.BigArray{`0}.Visitor)"/> method.
            This data structure employs the "length and capacity" pattern. The logical length 
            can be retrieved from the <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Length"/> property, which can possibly be strictly less
            than the total capacity. 
            </summary>
            <typeparam name="T">The type of entries.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Length">
            <summary>
            Gets the logical length of the big array.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Item(System.Int64)">
            <summary>
            Gets or sets the entry at <paramref name="index"/>. 
            </summary>
            <remarks>
            This indexer is not efficient for looping. If looping access to entries is desired, 
            use the <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.ApplyRange(System.Int64,System.Int64,Microsoft.ML.Runtime.Internal.Utilities.BigArray{`0}.Visitor)"/> method instead.
            Note that unlike a normal array, the value returned from this indexer getter cannot be modified 
            (e.g., by ++ operator or passing into a method as a ref parameter). To modify an entry, use 
            the <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.ApplyAt(System.Int64,Microsoft.ML.Runtime.Internal.Utilities.BigArray{`0}.Visitor)"/> method instead.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1"/> class with a specified size.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.ApplyAt(System.Int64,Microsoft.ML.Runtime.Internal.Utilities.BigArray{`0}.Visitor)">
            <summary>
            Applies a <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Visitor"/> method at a given <paramref name="index"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.ApplyRange(System.Int64,System.Int64,Microsoft.ML.Runtime.Internal.Utilities.BigArray{`0}.Visitor)">
            <summary>
            Implements a more efficient way to loop over index range in [min, lim) and apply
            the specified method delegate.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.FillRange(System.Int64,System.Int64,`0)">
            <summary>
            Fills the entries with index in [min, lim) with the given value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Resize(System.Int64)">
            <summary>
            Resizes the array so that its logical length equals <paramref name="newLength"/>. This method 
            is more efficient than initialize another array and copy the entries because it preserves 
            existing blocks. The actual capacity of the array may become larger than <paramref name="newLength"/>.
            If <paramref name="newLength"/> equals <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Length"/>, then no operation is done.
            If <paramref name="newLength"/> is less than <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Length"/>, the array shrinks in size
            so that both its length and its capacity equal <paramref name="newLength"/>.
            If <paramref name="newLength"/> is larger than <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.Length"/>, the array capacity grows
            to the smallest integral multiple of <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.BlockSize"/> that is larger than <paramref name="newLength"/>, 
            unless <paramref name="newLength"/> is less than <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.BlockSize"/>, in which case the capacity 
            grows to double its current capacity or <paramref name="newLength"/>, which ever is larger, 
            but up to <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.BlockSize"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.TrimCapacity">
            <summary>
            Trims the capacity to logical length.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.AddRange(`0[],System.Int32)">
            <summary>
            Appends the first <paramref name="length"/> elements of <paramref name="src"/> to the end. 
            This method is thread safe related to calls to <see cref="M:CopyTo"/> (assuming those copy operations
            are happening over ranges already added), but concurrent calls to
            <see cref="M:AddRange"/> should not be attempted. Intended usage is that
            one thread will call this method, while multiple threads may access
            previously added ranges from <see cref="M:CopyTo"/>, concurrently with
            this method or themselves.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BigArray`1.CopyTo(System.Int64,`0[],System.Int32)">
            <summary>
            Copies the subarray starting from index <paramref name="idx"/> of length 
            <paramref name="length"/> to the destination array <paramref name="dst"/>. 
            Concurrent calls to this method is valid even with one single concurrent call 
            to <see cref="M:AddRange"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BinFinderBase.GetSplitValue(System.Single,System.Single)">
            <summary>
            This should normally be just (a + b) / 2, except in one interesting case:
            If a and b are 'consecutive' floats (they differ only in the least significant bit),
            the above expression is possible to be rounded to a.
            This can lead to bin bounds that are not strictly increasing!
            Also note that the simple (a + b) / 2 can overflow, that's the reason for a / 2 + b / 2.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.BinFinderBase.GetSplitValue(System.Double,System.Double)">
            <summary>
            This should normally be just (a + b) / 2, except in one interesting case:
            If a and b are 'consecutive' floats (they differ only in the least significant bit),
            the above expression is possible to be rounded to a.
            This can lead to bin bounds that are not strictly increasing!
            Also note that the simple (a + b) / 2 can overflow, that's the reason for a / 2 + b / 2.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.GreedyBinFinder.PlacePegs">
            <summary>
            Initial placement of the pegs.
            Places pegs one by one and always picks the largest existing segment to split.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.GreedyBinFinder.GetSegmentSplit(System.Int32,System.Int32)">
            <summary>
            Gets the best split for a peg between min and max.
            In case of a tie, use 'pos' to pick the location closer to the more natural split.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.GreedyBinFinder.GetSplitEnergy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the energy reduction for splitting segment [min, max] at 'split' point
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.GreedyBinFinder.BetterPlacement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if 'i' is a better peg placement than 'j', which means it is closer to the ideal position for peg 'pos'
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.GreedyBinFinder.ReduceEnergy">
            <summary>
            After the initial peg placement,
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.DynamicBinFinder.GetEnergyBounds(System.Int32,System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
            For the remaining bins, compute the best energy distribution and the worst energy distribution
            The best energy distribution:
                - make the distances as equal as possible;
                - some of them will be 'ave' and the rest will be 'ave+1'
            The worst energy distribution:
                - all except one distance will be 1
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable">
            <summary>
            Environment variable containing optional resources path.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindExistentFileOrNull(System.String,System.String,System.String,System.Type)">
            <summary>
            Attempts to find a file that is expected to be distributed with a TLC component. Searches
            in the following order:
            1. In the customSearchDir directory, if it is provided.
            2. In the custom search directory specified by the 
               <seealso cref="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable"/> environment variable.
            3. In the root folder of the provided assembly.
            4. In the folder of this assembly.
            In each case it searches the file in the directory provided and combined with folderPrefix.
            
            If any of these locations contain the file, a full local path will be returned, otherwise this
            method will return null.
            </summary>
            <param name="fileName">File name to find</param>
            <param name="folderPrefix">folder prefix, relative to the current or customSearchDir</param>
            <param name="customSearchDir">
            Custom directory to search for resources. 
            If null, the path specified in the environment variable <seealso cref="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable"/>
            will be used.
            </param>
            <param name="assemblyForBasePath">
            Assembly type to search the path of.
            </param>
            <returns>
            Path to the existing file. Null if not found.
            </returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateFolderIfNotExists(System.String)">
            <summary>
             Given a folder path, create it if it doesn't exist.
             Fails if the folder name is empty, or can't create the folder.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntArray(System.IO.BinaryWriter,System.Int32[])">
            <summary>
            Writes a length prefixed array of ints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntArray(System.IO.BinaryWriter,System.Int32[],System.Int32)">
            <summary>
            Writes a length prefixed array of ints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntsNoCount(System.IO.BinaryWriter,System.Int32[],System.Int32)">
            <summary>
            Writes an array of ints without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntArray(System.IO.BinaryWriter,System.UInt32[])">
            <summary>
            Writes a length prefixed array of uints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntArray(System.IO.BinaryWriter,System.UInt32[],System.Int32)">
            <summary>
            Writes a length prefixed array of uints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntsNoCount(System.IO.BinaryWriter,System.UInt32[],System.Int32)">
            <summary>
            Writes an array of uints without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteArray(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a length prefixed array of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteArray(System.IO.BinaryWriter,System.Byte[],System.Int32)">
            <summary>
            Writes a length prefixed array of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBytesNoCount(System.IO.BinaryWriter,System.Byte[],System.Int32)">
            <summary>
            Writes an array of bytes without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Single[])">
            <summary>
            Writes a length prefixed array of Floats.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Single[],System.Int32)">
            <summary>
            Writes a length prefixed array of Floats.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Single[],System.Int32,System.Int32)">
            <summary>
            Writes a specified number of floats starting at the specified index from an array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Writes a length prefixed array of Floats.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatsNoCount(System.IO.BinaryWriter,System.Single[],System.Int32)">
            <summary>
            Writes an array of Floats without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleArray(System.IO.BinaryWriter,System.Single[])">
            <summary>
            Writes a length prefixed array of singles.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleArray(System.IO.BinaryWriter,System.Single[],System.Int32)">
            <summary>
            Writes a length prefixed array of singles.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSinglesNoCount(System.IO.BinaryWriter,System.Single[],System.Int32)">
            <summary>
            Writes an array of singles without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleArray(System.IO.BinaryWriter,System.Double[])">
            <summary>
            Writes a length prefixed array of doubles.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleArray(System.IO.BinaryWriter,System.Double[],System.Int32)">
            <summary>
            Writes a length prefixed array of doubles.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoublesNoCount(System.IO.BinaryWriter,System.Double[],System.Int32)">
            <summary>
            Writes an array of doubles without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByteArray(System.IO.BinaryWriter,System.Boolean[])">
            <summary>
            Writes a length prefixed array of bools as bytes with 0/1 values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByteArray(System.IO.BinaryWriter,System.Boolean[],System.Int32)">
            <summary>
            Writes a length prefixed array of bools as bytes with 0/1 values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolBytesNoCount(System.IO.BinaryWriter,System.Boolean[],System.Int32)">
            <summary>
            Writes an array of bools as bytes with 0/1 values, without the length prefix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteCharArray(System.IO.BinaryWriter,System.Char[])">
            <summary>
            Writes a length prefixed array of chars.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBitArray(System.IO.BinaryWriter,System.Collections.BitArray)">
            <summary>
            Writes a length prefixed array of packed bits.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteLeb128Int(System.IO.BinaryWriter,System.UInt64)">
            <summary>
            Writes what Microsoft calls a UTF-7 encoded number in the binary reader and
            writer string methods. For non-negative integers this is equivalent to LEB128
            (see http://en.wikipedia.org/wiki/LEB128).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Leb128IntLength(System.UInt64)">
            <summary>
            The number of bytes that would be written if one were to attempt to write
            the value in LEB128.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBlock(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            If this return it will read exactly length bytes, and unlike the
            regular read method fails if it cannot.
            </summary>
            <param name="s">The stream</param>
            <param name="buff">The buffer into which to write the data.</param>
            <param name="offset">The offset of the output array into which to write.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLeb128Int(System.IO.BinaryReader)">
            <summary>
            Reads a LEB128 encoded unsigned integer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.OpenWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            A convenience method to open a stream writer, by default with no-BOM UTF-8 encoding,
            buffer size of 1K, and the stream left open.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CheckOptionalUserDirectory(System.String,System.String)">
            <summary>
            Checks that the directory of the file name passed in already exists.
            This is meant to be called before calling an API that creates the file, 
            so the file need not exist.
            </summary>
            <param name="file">An absolute or relative file path, or null to skip the check 
            (useful for optional user parameters)</param>
            <param name="userArgument">The user level parameter name, as exposed by the command line help</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Int32[],System.Int32)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Single[],System.Single)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Double[],System.Double)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.TryFindIndexSorted(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Akin to <c>FindIndexSorted</c>, except stores the found index in the output
            <c>index</c> parameter, and returns whether that index is a valid index
            pointing to a value equal to the input parameter <c>value</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Single[],System.Int32,System.Int32,System.Single)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Finds the unique index for which func(input[i]) == false whenever i &lt; index and
            func(input[i]) == true whenever i &gt;= index.
            Callers should guarantee that there is such an index. Uses binary search.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted``2(``0[],System.Int32,System.Int32,System.Func{``0,``1,System.Boolean},``1)">
            <summary>
            Finds the unique index for which func(input[i], value) == false whenever i &lt; index and
            func(input[i], value) == true whenever i &gt;= index.
            Callers should guarantee that there is such an index. Uses binary search.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsIncreasing(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Returns whether an input integer vector is sorted and unique,
            and between an inclusive lower and exclusive upper bound for
            the first and last items, respectively.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsIncreasing(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Returns whether an input integer vector up to <paramref name="len"/>
            is sorted and unique, and between an inclusive lower and exclusive
            upper bound for the first and last items, respectively.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateArray``1(System.Int32,``0)">
            <summary>
            Create an array of specified length, filled with a specified value
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.BuildSubsetMaps(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32[]@,System.Int32[]@)">
            <summary>
            Given a predicate, over a range of values defined by a limit calculate
            first the values for which that predicate was true, and second an inverse
            map.
            </summary>
            <param name="lim">Indicates the exclusive upper bound on the tested values</param>
            <param name="pred">The predicate to test for various value</param>
            <param name="map">An ascending array of values from 0 inclusive
            to <paramref name="lim"/> exclusive, holding all values for which
            <paramref name="pred"/> is true</param>
            <param name="invMap">Forms an inverse mapping of <paramref name="map"/>,
            so that <c><paramref name="invMap"/>[<paramref name="map"/>[i]] == i</c>,
            and for other entries not appearing in <paramref name="map"/>,
            <c><paramref name="invMap"/>[i] == -1</c></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.EnsureSize``1(``0[]@,System.Int32,System.Boolean)">
            <summary>
            Resizes the array if necessary, to ensure that it has at least <paramref name="min"/> elements.
            </summary>
            <param name="array">The array to resize. Can be null.</param>
            <param name="min">The minimum number of items the new array must have.</param>
            <param name="keepOld">True means that the old array is preserved, if possible (Array.Resize is called). False
            means that a new array will be allocated.
            </param>
            <returns>The new size, that is no less than <paramref name="min"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.EnsureSize``1(``0[]@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the array if necessary, to ensure that it has at least <paramref name="min"/> and at most <paramref name="max"/> elements.
            </summary>
            <param name="array">The array to resize. Can be null.</param>
            <param name="min">The minimum number of items the new array must have.</param>
            <param name="max">The maximum number of items the new array can have.</param>
            <param name="keepOld">True means that the old array is preserved, if possible (Array.Resize is called). False
            means that a new array will be allocated.
            </param>
            <returns>The new size, that is no less than <paramref name="min"/> and no more that <paramref name="max"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetCardinality(System.Collections.BitArray)">
            <summary>
            Returns the number of set bits in a bit array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)">
            <summary>
            Given a generic method with a single type parameter, re-create the generic method on a new type,
            then reinvoke the method and return the result. A common pattern throughout the code base is to
            have some sort of generic method, whose parameters and return value are, as defined, non-generic,
            but whose code depends on some sort of generic type parameter. This utility method exists to make
            this common pattern more convenient, and also safer so that the arguments, if any, can be type
            checked at compile time instead of at runtime.
            
            Because it is strongly typed, this can only be applied to methods whose return type
            is known at compile time, that is, that do not depend on the type parameter of the method itself.
            </summary>
            <typeparam name="TRet">The return value</typeparam>
            <param name="func">A delegate that should be a generic method with a single type parameter.
            The generic method definition will be extracted, then a new method will be created with the
            given type parameter, then the method will be invoked.</param>
            <param name="genArg">The new type parameter for the generic method</param>
            <returns>The return value of the invoked function</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``2(System.Func{``0,``1},System.Type,``0)">
            <summary>
            A one-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``3(System.Func{``0,``1,``2},System.Type,``0,``1)">
            <summary>
            A two-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``4(System.Func{``0,``1,``2,``3},System.Type,``0,``1,``2)">
            <summary>
            A three-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``5(System.Func{``0,``1,``2,``3,``4},System.Type,``0,``1,``2,``3)">
            <summary>
            A four-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``6(System.Func{``0,``1,``2,``3,``4,``5},System.Type,``0,``1,``2,``3,``4)">
            <summary>
            A five-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Type,``0,``1,``2,``3,``4,``5)">
            <summary>
            A six-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Type,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            A seven-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Type,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            An eight-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Type,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            A nine-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Type,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            A ten-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke(System.Action,System.Type)">
            <summary>
            This is akin to <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)"/>, except applied to
            <see cref="T:System.Action"/> instead of <see cref="T:System.Func`1"/>.
            </summary>
            <param name="act">A delegate that should be a generic method with a single type parameter.
            The generic method definition will be extracted, then a new method will be created with the
            given type parameter, then the method will be invoked.</param>
            <param name="genArg">The new type parameter for the generic method</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke``1(System.Action{``0},System.Type,``0)">
            <summary>
            A one-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke(System.Action,System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.CmdIndenter.GetIndentedCommandLine(System.String)">
            <summary>
            Get indented version of command line or same string if we unable to produce it.
            </summary>
            <param name="commandLine">command line</param>
            <returns>indented version of command line(if possible)</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.CmdIndenter.TryProduceIndentString(System.String,Microsoft.ML.Runtime.Internal.Utilities.IndentingTextWriter)">
            <summary>
            Try produce indented string for command line.
            </summary>
            <param name="text">command line</param>
            <param name="itw">indenting text writer</param>
            <returns>true if we was able to produce indented string without any problem</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.DoubleParser.Result">
            <summary>
            Result codes from Parse methods. Note that the order matters.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.DoubleParser.Result.Good">
            <summary>
            No issues.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.DoubleParser.Result.Empty">
            <summary>
            Empty or only whitespace
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.DoubleParser.Result.Extra">
            <summary>
            Extra non-whitespace characters after successful parse
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.DoubleParser.Result.Error">
            <summary>
            Parsing error
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.FixedSizeQueue`1">
            <summary>
            A fixed-length circular array. Items are added at the end. If the array is full, adding
             an item will result in discarding the least recently added item.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1">
            <summary>
            A Hash Array that implements both val -> index lookup and index -> val lookup.
            Also implements memory efficient sorting.
            Note: Supports adding and looking up of items but does not support removal of items.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1.TryGetIndex(`0,System.Int32@)">
            <summary>
            Find the index of the given val in the hash array.
            Returns a bool representing if val is present.
            Index outputs the index that the val is at in the array, -1 otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1.Add(`0)">
            <summary>
            Make sure the given value has an equivalent TItem in the hashArray
            and return the index of the value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1.TryAdd(`0)">
            <summary>
            Make sure the given value has an equivalent TItem in the hashArray
            and return the index of the value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1.AddCore(`0,System.Int32)">
            <summary>
            Adds the value as a TItem. Does not check whether the TItem is already present.
            Returns the index of the added value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1.FillTable">
            <summary>
            Appropriately fills _rgnext and _rgit based on _rgt and _rghash.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HashArray`1.CopyTo(`0[])">
            <summary>
            Copies all items to the passed in array. Requires the passed in array to be at least the
            same length as Count.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.CombinedHash(System.Int32,System.Object[])">
            <summary>
            Creates a combined hash of possibly heterogenously typed values.
            </summary>
            <param name="startHash">The leading hash, incorporated into the final hash</param>
            <param name="os">A variable list of objects, where null is a valid value</param>
            <returns>The combined hash incorpoating a starting hash, and the hash codes
            of all input values</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.CombinedHash``1(System.Int32,``0[])">
            <summary>
            Creates a combined hash of multiple homogenously typed non-null values.
            </summary>
            <typeparam name="T">The type of items to hash</typeparam>
            <param name="startHash">The leading hash, incorporated into the final hash</param>
            <param name="os">A variable list of non-null values</param>
            <returns>The combined hash incorpoating a starting hash, and the hash codes
            of all input values</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.HashString(System.String)">
            <summary>
            Hash the characters in a string. This MUST produce the same result as the other
            overloads (with equivalent characters).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.HashString(System.String,System.Int32,System.Int32)">
            <summary>
            Hash the characters in a sub-string. This MUST produce the same result
            as HashString(str.SubString(ichMin, ichLim - ichMin)).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.HashString(System.Text.StringBuilder)">
            <summary>
            Hash the characters in a string builder. This MUST produce the same result
            as HashString(sb.ToString()).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MurmurRound(System.UInt32,System.UInt32)">
            <summary>
            Combines the given hash value with a uint value, using the murmur hash 3 algorithm.
            Make certain to also use <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MixHash(System.UInt32)"/> on the final hashed value, if you
            depend upon having distinct bits.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MurmurHash(System.UInt32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Implements the murmur hash 3 algorithm, using a mock UTF-8 encoding.
            The UTF-8 conversion ignores the possibilities of unicode planes other than the 0th.
            That is, it simply converts char values to one, two, or three bytes according to
            the following rules:
            * 0x0000 to 0x007F : 0xxxxxxx
            * 0x0080 to 0x07FF : 110xxxxx 10xxxxxx
            * 0x0800 to 0xFFFF : 1110xxxx 10xxxxxx 10xxxxxx
            NOTE: This MUST match the StringBuilder version below.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MurmurHash(System.UInt32,System.Text.StringBuilder,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Implements the murmur hash 3 algorithm, using a mock UTF-8 encoding.
            The UTF-8 conversion ignores the possibilities of unicode planes other than the 0th.
            That is, it simply converts char values to one, two, or three bytes according to
            the following rules:
            * 0x0000 to 0x007F : 0xxxxxxx
            * 0x0080 to 0x07FF : 110xxxxx 10xxxxxx
            * 0x0800 to 0xFFFF : 1110xxxx 10xxxxxx 10xxxxxx
            NOTE: This MUST match the string version above.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MurmurHash(System.UInt32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Performs a MurmurRound on each int in the sequence
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MixHash(System.UInt32)">
            <summary>
            The final mixing ritual for the Murmur3 hashing algorithm. Most users of
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Hashing.MurmurRound(System.UInt32,System.UInt32)"/> will want to close their progressive building of
            a hash with a call to this method.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.Heap`1">
            <summary>
            Implements a heap.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            A Heap structure gives efficient access to the ordered next element.
            </summary>
            <param name="fnReverse">A delegate that takes two <c>T</c> objects, and if
            it returns true then the second object should be popped before the first</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.#ctor(System.Func{`0,`0,System.Boolean},System.Int32)">
            <summary>
            A Heap structure gives efficient access to the ordered next element.
            </summary>
            <param name="fnReverse">A delegate that takes two <c>T</c> objects, and if
            it returns true then the second object should be popped before the first</param>
            <param name="capacity">The initial capacity of the heap</param>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.FnReverse">
            <summary> Func tests true if first element should be after the second
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Count">
            <summary>
            Current count of elements remaining in the heap
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Clear">
            <summary>
            Discard all elements currently in the heap
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Top">
            <summary>
            Peek at the first element in the heap
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Pop">
            <summary>
            Remove and return the first element in the heap
            </summary>
            <returns>The first element in the heap</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Add(`0)">
            <summary>
            Add a new element to the heap
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.HeapNode">
            <summary>
            For the heap to allow deletion, the heap node has to derive from this class.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1">
            <summary>
            Implements a heap.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            A Heap structure gives efficient access to the ordered next element.
            </summary>
            <param name="fnReverse">A delegate that takes two <c>T</c> objects, and if
            it returns true then the second object should be popped before the first</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.#ctor(System.Func{`0,`0,System.Boolean},System.Int32)">
            <summary>
            A Heap structure gives efficient access to the ordered next element.
            </summary>
            <param name="fnReverse">A delegate that takes two <c>T</c> objects, and if
            it returns true then the second object should be popped before the first</param>
            <param name="capacity">The initial capacity of the heap</param>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.FnReverse">
            <summary> Func tests true if first element should be after the second
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.Count">
            <summary>
            Current count of elements remaining in the heap
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.Clear">
            <summary>
            Remove all elements currently in the heap
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.Top">
            <summary>
            Peek at the first element in the heap
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.Pop">
            <summary>
            Remove and return the first element in the heap
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.Add(`0)">
            <summary>
            Add a new element to the heap
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HeapNode.Heap`1.Delete(`0)">
            <summary>
            Remove an element from the heap
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.HybridMemoryStream">
            <summary>
            This is a read-write stream that, at or below a length threshold given in the constructor,
            works purely in memory, but if it ever grows larger than that point backs off to use the
            file system. This can be useful if we have intermediate operations that require streams.
            The temporary file will be destroyed if the object is properly disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HybridMemoryStream.#ctor(System.Int32)">
            <summary>
            Constructs an initially empty read-write stream. Once the number of
            bytes in the stream exceeds <paramref name="maxLen"/>,
            then we back off to disk.
            </summary>
            <param name="maxLen">The maximum length we will accomodate in memory</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HybridMemoryStream.CreateCache(System.IO.Stream,System.Int32)">
            <summary>
            A common usecase of the hybrid memory stream is to create a persistent
            readable (not necessarily writable) copy of a stream whose source is very
            transient and temporary. This utility method makes that creation of a copy
            somewhat easier.
            </summary>
            <param name="stream">A stream that can be opened</param>
            <param name="maxLen">The maximum length we will accomodate in memory</param>
            <returns>A readable copy of the data stream</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.HybridMemoryStream.EnsureOverflow">
            <summary>
            Creates the overflow stream if it does not exist, switching all content over to
            the file-based stream and disposing of the memory stream. If the overflow stream
            already exists, this method has no effect.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.LruCache`2">
            <summary>
            Implements a least recently used cache.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.LruCache`2.Keys">
            <summary>
            Returns the keys of the items stored in the cache, sorted from the most recently used
            to the least recently used.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.LruCache`2.#ctor(System.Int32)">
            <summary>
            Initializes a new LRU cache with a given size.
            The class is not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.LruCache`2.TryGetValue(`0,`1@)">
            <summary>
            Looks up and returns an item. If the item is found, mark it as recently used.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.LruCache`2.Add(`0,`1)">
            <summary>
            Adds a new item in the cache. It will be marked as recently used. If the cache
            would grow over the max size, the least recently used item is removed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.MathUtils">
            <summary>
            Some useful math methods.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.SimpleLinearRegression(System.Single[],System.Single[],System.Single@,System.Single@)">
            <summary>
            Finds the best least-squares fit of y = ax + b
            </summary>
            <param name="x">The x values.</param>
            <param name="y">The y values.</param>
            <param name="a">The coefficent a.</param>
            <param name="b">The intercept b.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Product(System.Int32[])">
            <summary>
            The product of elements in a
            </summary>
            <param name="a">an array</param>
            <returns>the product of a's elements</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Max(System.Single[])">
            <summary>
            Find the max element of a
            </summary>
            <param name="a">an array</param>
            <returns>the max element</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Min(System.Single[])">
            <summary>
            Find the minimum element of a
            </summary>
            <param name="a">an array</param>
            <returns>the minimum element</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ArgMax(System.Single[])">
            <summary>
            Finds the first index of the max element of the array.
            NaNs are ignored. If all the elements to consider are NaNs, -1 is 
            returned. The caller should distinguish in this case between two
            possibilities:
            1) The number of the element to consider is zero.
            2) All the elements to consider are NaNs.
            </summary>
            <param name="a">an array</param>
            <returns>the first index of the max element</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ArgMax(System.Single[],System.Int32)">
            <summary>
            Finds the first index of the max element of the array. 
            NaNs are ignored. If all the elements to consider are NaNs, -1 is 
            returned. The caller should distinguish in this case between two
            possibilities:
            1) The number of the element to consider is zero.
            2) All the elements to consider are NaNs.
            </summary>
            <param name="a">an array</param>
            <param name="count">number of the element in the array to consider</param>
            <returns>the first index of the max element</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ArgMin(System.Single[])">
            <summary>
            Finds the first index of the minimum element of the array.
            NaNs are ignored. If all the elements to consider are NaNs, -1 is 
            returned. The caller should distinguish in this case between two
            possibilities:
            1) The number of the element to consider is zero.
            2) All the elements to consider are NaNs.
            </summary>
            <param name="a">an array</param>
            <returns>the first index of the minimum element</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ArgMin(System.Single[],System.Int32)">
            <summary>
            Finds the first index of the minimum element of the array.
            NaNs are ignored. If all the elements to consider are NaNs, -1 is 
            returned. The caller should distinguish in this case between two
            possibilities:
            1) The number of the element to consider is zero.
            2) All the elements to consider are NaNs.
            </summary>
            <param name="a">an array</param>
            <param name="count">number of the element in the array to consider</param>
            <returns>the first index of the minimum element</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.SoftMax(System.Single[],System.Int32)">
            <summary>
            computes the "softmax" function: log sum_i exp x_i
            </summary>
            <param name="inputs">Array of numbers to softmax</param>
            <param name="count">the number of input array elements to process</param>
            <returns>the softmax of the numbers</returns>
            <remarks>may have slightly lower roundoff error if inputs are sorted, smallest first</remarks>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.SoftMax(System.Single,System.Single)">
            <summary>
            computes "softmax" function of two arguments: log (exp x + exp y)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.AlmostEqual(System.Single,System.Single)">
            <summary>
            true if two Float values are close (using relative comparison)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.LogGamma(System.Double)">
            <summary>
            Returns the log of the gamma function, using the Stirling approximation
            </summary>
            <param name="x">Argument of function</param>
            <returns>Log Gamma(x)</returns>
            <remarks>Accurate to eight digits for all x.</remarks>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.LogFactorial(System.Int32)">
            <summary>
            Computes the log factorial of n, using fast methods
            </summary>
            <param name="n">The number to compute the factorial of</param>
            <returns>The log factorial of n</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.TStatisticToPValue(System.Double,System.Double)">
            <summary>
            Returns the two-tailed p-value given a t statistic from a distribution
            parameterized by the provided number of degrees of freedom.
            </summary>
            <param name="t">The t-statistic</param>
            <param name="df">The degrees of freedom</param>
            <returns>The corresponding two-tailed p-value</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Lentz(Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Sequence,Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Sequence,System.Double)">
            <summary>
            Lentz's algorithm for evaluating the continued fraction
            b0 + a1 / (b1 + a2 / (b2 + a3 / (b3 + a4 / ...) ) )
            </summary>
            <param name="a">The <c>a</c> function mapping positive integers to a sequence term</param>
            <param name="b">The <c>b</c> function mapping non-negative integers to a sequence term</param>
            <param name="tol">Calculate the continued fraction to this tolerance</param>
            <returns>The evaluation of the continued fraction</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Sigmoid(System.Single)">
            <summary>
            The logistic sigmoid function: 1 / (1 + e^(-x)).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Tanh(System.Single)">
            <summary>
            Hyperbolic tangent.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.SigmoidSlow(System.Single)">
            <summary>
            The logistic sigmoid function: 1 / (1 + e^(-x)).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.TanhSlow(System.Single)">
            <summary>
            Hyperbolic tangent.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ExpSlow(System.Single)">
            <summary>
            The exponential function: e^(x).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.SigmoidFast(System.Single)">
            <summary>
            The logistic sigmoid function: 1 / (1 + e^(-x)).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.TanhFast(System.Single)">
            <summary>
            The hyperbolic tangent function.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ExpFast(System.Single)">
            <summary>
            The exponential function: e^(x).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ApplySoftMax(System.Single[],System.Single[])">
            <summary>
            Apply a soft max on an array of Floats. Note that src and dst may be the same array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.ApplySoftMax(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply a soft max on a range within an array of Floats. Note that src and dst may be the same array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Entropy(System.Double,System.Boolean)">
            <summary>
            Entropy of a given probability
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.CrossEntropy(System.Double,System.Double,System.Boolean)">
            <summary>
            Cross-entropy of two distributions
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.LnSum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Given a set of values <c>Ln(a1), Ln(a2), ... Ln(an)</c>,
            return <c>Ln(a1+a2+...+an)</c>. This is especially useful
            when working with log probabilities and likelihoods.
            </summary>
            <param name="terms"></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Sin(System.Double)">
            <summary>
            Math.Sin returns the input value for inputs with large magnitude. We return NaN instead, for consistency 
            with Math.Sin(infinity).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.Cos(System.Double)">
            <summary>
            Math.Cos returns the input value for inputs with large magnitude. We return NaN instead, for consistency 
            with Math.Cos(infinity).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MathUtils.DivisionCeiling(System.Int64,System.Int64)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the result of the division.
            </summary>
            <param name="numerator">Number to be divided.</param>
            <param name="denomenator">Number with which to divide the numerator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MatrixTransposeOps.TransposeSingleThread``1(``0[],``0[],System.Int32,System.Int32)">
            <summary>
            Swap the first m*n elements within a given array so that, for any
            non-negative i and j less than m and n respectively, dst[i*n+j] == src[j*m+i].
            This variant of the function is single threaded, and useful in that
            case where the workflow is otherwise single threaded.
            </summary>
            <typeparam name="T">Elements of the array are this type</typeparam>
            <param name="src"></param>
            <param name="dst">Where to write the transpose. Note that dst cannot be the same as src.</param>
            <param name="m"></param>
            <param name="n"></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MatrixTransposeOps.Transpose``1(``0[],``0[],System.Int32,System.Int32)">
            <summary>
            Swap the first m*n elements within a given array so that, for any
            non-negative i and j less than m and n respectively, dst[i*n+j] == src[j*m+i]
            </summary>
            <typeparam name="T">Elements of the array are this type</typeparam>
            <param name="src">The source elements of the transpose. Must contain at least m*n elements.</param>
            <param name="dst">Where to write the transpose. Note that dst cannot be the same as src. Must contain at least m*n elements.</param>
            <param name="m">The major index.</param>
            <param name="n">The minor index. Elements are currently stored in "m" blocks of "n" items.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MatrixTransposeOps.Transpose(System.Single*,System.Single*,System.Int32,System.Int32)">
            <summary>
            Swap the first m*n elements within a given array so that, for any
            non-negative i and j less than m and n respectively, b[i*n+j] == a[j*m+i]
            </summary>
            <param name="src"></param>
            <param name="dst">Where to write the transpose. Note that dst cannot be the same as src.</param>
            <param name="m"></param>
            <param name="n"></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MatrixTransposeOps.Transpose(System.Double*,System.Double*,System.Int32,System.Int32)">
            <summary>
            Swap the first m*n elements within a given array so that, for any
            non-negative i and j less than m and n respectively, b[i*n+j] == a[j*m+i]
            </summary>
            <param name="src"></param>
            <param name="dst">Where to write the transpose. Note that dst cannot be the same as src.</param>
            <param name="m"></param>
            <param name="n"></param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter">
            <summary>
            A synchronization primitive meant to address situations where you have a set of
            entities of known count, where you want to iteratively provide critical sections
            for each depending on which comes first, but you do not necessarily know what
            constitutes "first" until all such entities tell you where they stand in line.
            
            The anticipated usage is that whatever entity is using the <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter"/>
            to synchronize itself, will register itself using <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.Register(System.Int64)"/>
            so as to unblock any "lower" waiters as soon as it knows what value it needs to
            wait on, perform whatever local work it can, and when it needs to, wait on the
            event it got when it registered itself. It may then repeat the cycle by
            registering itself for a new event (or, finally, retiring itself through
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.Retire"/>).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.WaitStats">
            <summary>
            This is an event-line pair. The intended usage is, when the line
            is the minimum at a point when all waiters have registered, the event
            will be signaled.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.#ctor(System.Int32)">
            <summary>
            Creates a minimum waiter.
            </summary>
            <param name="waiters">The initial number of waiters</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.Register(System.Int64)">
            <summary>
            Indicates to the waiter that we want to, at some future point, wait at a given
            position. This object will return a reset event that can be waited on, at the
            point when we actually want to wait. This method itself has the potential to
            signal other events, if by registering ourselves the waiter becomes aware of
            the maximum number of waiters, allowing that waiter to enter its critical state.
            
            If multiple events are associated with the minimum value, then only one will
            be signaled, and the rest will remain unsignaled. Which is chosen is undefined.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.Retire">
            <summary>
            Retires one of the waiters, and return the current maximum number of waiters.
            If it so happens that by retiring this waiter the number of waiters reaches the
            maximum, the appropriate waiter will be signaled as described in <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.MinWaiter.Register(System.Int64)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.NormStr">
            <summary>
            Normalized string type. For string pooling.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.#ctor(System.String,System.Int32,System.UInt32)">
            <summary>
            NormStr's can only be created by the Pool.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.Get(System.String,System.Boolean)">
            <summary>
            Find the given string in the pool. If not found, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.Add(System.String)">
            <summary>
            Make sure the given string has an equivalent NormStr in the pool and return it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.Get(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determine if the given sub-string has an equivalent NormStr in the pool.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Make sure the given sub-string has an equivalent NormStr in the pool and return it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.Get(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Make sure the given string has an equivalent NormStr in the pool and return it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.Add(System.Text.StringBuilder)">
            <summary>
            Make sure the given string builder has an equivalent NormStr in the pool and return it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool.AddCore(System.String,System.UInt32)">
            <summary>
            Adds the item. Does NOT check for whether the item is already present.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter">
             <summary>
             The primary use case for this structure is to impose ordering among
             multiple producer threads, in case one is producing output that one
             wishes to have ordered.
            
             More specifically, the ordered waiter allows a thread to wait on a
             particular position. So if three threads wait on 0, 1, then 2 (in
             any order), the first thread to clear the wait will be 0, then 1 will
             be cleared once incremented, then 2 will be cleared once incremented.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.WaitStats">
            <summary>
            This is an event-line pair. The intended usage is, when the line
            is hit by the containing ordered waiter, the thread will be hit.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.#ctor(System.Boolean)">
            <summary>
            Creates an ordered waiter.
            </summary>
            <param name="firstCleared">If true, then the first position (that is,
            position 0) will be considered already free to proceed. If not something
            will need to hit increment.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.#ctor(System.Int64)">
            <summary>
            Creates an ordered waiter.
            </summary>
            <param name="startPos">If startPos is &gt;= 0 then waiter starts from that position.
            If not something will need to hit increment |startPos| times.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.Wait(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Wait on a given position. This will block, until this object has
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.Increment"/> called up to the position indicated. This
            accepts cancellation tokens, but the default cancellation token also
            works.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.Increment">
            <summary>
            Moves the waiter to the next position, and signals any waiters waiting at
            or before that position.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.IncrementAll">
            <summary>
            Signals all waiters. No more calls to <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.Increment"/> should be
            attempted.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.OrderedWaiter.SignalException(System.Exception)">
            <summary>
            This will signal all the waiters, but cause them to throw an exception.
            </summary>
            <param name="ex">The exception that will be the inner exception, of an
            exception that will throw for all current and subsequent waiters.</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.PlatformUtils">
            <summary>
            Contains extension methods that aid in building cross platform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1">
            <summary>
            This is an interface for creating samples of a requested size from a stream of data of type <typeparamref name="T"/>. 
            The sample is created in one pass by calling <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Sample"/> for every data point in the stream. Implementations should have 
            a delegate for getting the next data point, which is invoked if the current data point should go into the reservoir.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Size">
            <summary>
            If the number of elements sampled is less than the reservoir size, this should return the number of elements sampled.
            Otherwise it should return the reservoir size.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.NumSampled">
            <summary>
            Returns the number of elements sampled so far.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Sample">
            <summary>
            Sample the next data point from the stream.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Lock">
            <summary>
            This must be called before any calls to <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.GetSample"/>, and no subsequent calls to <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Sample"/> can
            be made after that.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.GetSample">
            <summary>
            Return the elements in the sample.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithoutReplacement`1">
            <summary>
            This class produces a sample without replacement from a stream of data of type <typeparamref name="T"/>. 
            It is instantiated with a delegate that gets the next data point, and builds a reservoir in one pass by calling <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithoutReplacement`1.Sample"/> 
            for every data point in the stream. In case the next data point does not get 'picked' into the reservoir, the delegate is not invoked.
            Sampling is done according to the algorithm in this paper: <see href="http://epubs.siam.org/doi/pdf/10.1137/1.9781611972740.53"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithoutReplacement`1.GetSample">
            <summary>
            Gets the reservoir sample.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1">
            <summary>
            This class produces a sample with replacement from a stream of data of type <typeparamref name="T"/>. 
            It is instantiated with a delegate that gets the next data point, and builds a reservoir in one pass by calling <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Sample"/> 
            for every data point in the stream. In case the next data point does not get 'picked' into the reservoir, the delegate is not invoked.
            Sampling is done according to the algorithm in this paper: <see href="http://epubs.siam.org/doi/pdf/10.1137/1.9781611972740.53"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.GetCache">
            <summary>
            Returns the cache. Users should not change the elements of the returned array.
            Access only elements up to the logical length of the array, which is <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Size"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.GetSample">
            <summary>
            Gets a reservoir sample with replacement of the elements sampled so far. Users should not change the 
            elements returned since multiple elements in the reservoir might be pointing to the same memory.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils">
            <summary>
            This class takes care of downloading resources needed by TLC components. Resources are located in
            a pre-defined location, that can be overridden by defining Environment variable <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.CustomResourcesUrlEnvVariable"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.TlcResourcesUrl">
            <summary>
            The location of the resources to download from. Uses either the default location or a location defined
            in an Environment variable.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.TimeoutEnvVariable">
            <summary>
            An environment variable containing a timeout period (in milliseconds) for downloading resources. If defined,
            overrides the timeout defined in the code.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.CustomResourcesUrlEnvVariable">
            <summary>
            Environment variable containing optional url to download resources from.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.GetUrl(System.String)">
            <summary>
            Generates a url from a suffix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.EnsureResource(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that tries to download a resource from a specified url, and returns the path to which it was
            downloaded, and an exception if one was thrown.
            </summary>
            <param name="env">The host environment.</param>
            <param name="ch">A channel to provide information about the download.</param>
            <param name="relativeUrl">The relative url from which to download.
            This is appended to the url defined in <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.TlcResourcesUrl"/>.</param>
            <param name="fileName">The name of the file to save.</param>
            <param name="dir">The directory where the file should be saved to. The file will be saved in a directory with the specified name inside 
            a folder called "tlc-resources" in the <see cref="F:System.Environment.SpecialFolder.ApplicationData"/> directory.</param>
            <param name="timeout">An integer indicating the number of milliseconds to wait before timing out while downloading a resource.</param>
            <returns>The download results, containing the file path where the resources was (or should have been) downloaded to, and an error message
            (or null if there was no error).</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.DownloadFromUrl(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,System.String,System.String,System.Int32,System.String)">
            <returns>Returns the error message if an error occured, null if download was successful.</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ResourceManagerUtils.GetFilePath(Microsoft.ML.Runtime.IChannel,System.String,System.String,System.String@)">
            <summary>
            Get the path where the resource should be downloaded to. If the environment variable
            is defined, download to the location defined there. Otherwise, download to the "dir" directory
            inside <see cref="F:System.Environment.SpecialFolder.LocalApplicationData"/>\tlc-resources\.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.Stats">
            <summary>
            A class containing common statistical functions
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleLong(System.Int64,Microsoft.ML.Runtime.IRandom)">
            <summary>
            Returns a number uniformly sampled from 0...(rangeSize-1)
            </summary>
            <param name="rangeSize">Size of range to sample from, between 0 and int.MaxValue^2</param>
            <param name="rand">Random number generator</param>
            <returns>Sampled value</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleFromGaussian(Microsoft.ML.Runtime.IRandom)">
            <summary>
            Returns a number sampled from a zero-mean, unit variance Gaussian
            </summary>
            <param name="rand">A Random to use for the sampling</param>
            <returns>a sample</returns>
            <remarks>uses Joseph L. Leva's algorithm from "A fast normal random number generator", 1992</remarks>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleFromGamma(Microsoft.ML.Runtime.IRandom,System.Double)">
            <summary>
            Returns a sample from the gamma distribution with scale parameter 1, shape parameter alpha
            </summary>
            <param name="alpha">Shape parameter</param>
            <param name="r">The random number generator to use</param>
            <returns>Sample from gamma distribution</returns>
            <remarks>Uses Marsaglia and Tsang's fast algorithm</remarks>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleFromBeta(Microsoft.ML.Runtime.IRandom,System.Double,System.Double)">
            <summary>
            Generates a beta-distributed random variable
            </summary>
            <param name="rand">Random generator to use</param>
            <param name="alpha1">first parameter</param>
            <param name="alpha2">second parameter</param>
            <returns>Sample from distribution</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleFromDirichlet(Microsoft.ML.Runtime.IRandom,System.Double[],System.Double[])">
            <summary>
            Generates a dirichlet-distributed random variable
            </summary>
            <param name="rand">Random generator to use</param>
            <param name="alphas">array of parameters</param>
            <param name="result">array in which to store resulting sample</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleFromCauchy(Microsoft.ML.Runtime.IRandom)">
            <summary>
            Sample from a standard Cauchy distribution:
            http://en.wikipedia.org/wiki/Lorentzian_function
            </summary>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Stats.SampleFromBinomial(Microsoft.ML.Runtime.IRandom,System.Int32,System.Double)">
            <summary>
            Returns a number sampled from the binomial distribution with parameters n and p
            </summary>
            <param name="r">Random generator to use</param>
            <param name="n">Parameter N of binomial</param>
            <param name="p">Parameter p of binomial</param>
            <returns></returns>
            <remarks>Should be robust for all values of n, p</remarks>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.SubsetStream">
            <summary>
            Returns a "view" stream, which appears to be a possibly truncated
            version of the stream. Reads on this containing stream will also
            advance the wrapped stream. If truncated, reads will not progress
            beyond the indicated length, and writes will fail beyond the
            indicated length. This stream supports seeking (and associated
            operations) if the underlying stream supports seeking, where it is
            supposed that the returned <c>SubsetStream</c> instance has position
            0 during creation, corresponding to whatever the position of the
            enclosed stream was during creation, so this stream will act as an
            "offset" version of the enclosed stream. As this is intended to
            operate over a subset of a stream, during closing or disposal of the
            subset stream, the underlying stream will always remain open and
            undisposed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SubsetStream.#ctor(System.IO.Stream,System.Nullable{System.Int64})">
            <summary>
            Construct the view stream.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The maximum length this containing
            stream should appear to have, or null if unbounded</param>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.RawCount">
            <summary>
            The running (unweighted) count of elements added to this object.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.Count">
            <summary>
            The running (weighted) count of elements.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.NonzeroCount">
            <summary>
            The running count of non-zero elements.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.NonzeroWeight">
            <summary>
            The running weight of non-zero elements.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.Mean">
            <summary>
            The running arithmetic mean.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.SampleVariance">
            <summary>
            Thes sample variance.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.SampleStdDev">
            <summary>
             The sample standard deviation.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.StandardErrorMean">
            <summary>
            Returns the standard error of the mean.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.Max">
            <summary>
            The maximum.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.Min">
            <summary>
            The minimum.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.Add(System.Double,System.Double,System.Int64)">
            <summary>
            Accumulates one more value, optionally weighted.
            This accumulation procedure is based on the following,
            with adjustments as appropriate for weighted instances:
            http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
            </summary>
            <param name="v">The value</param>
            <param name="w">The weight given to this value</param>
            <param name="c">Amount of appereance of this value</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase.Add(Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsBase)">
            <summary>
            Adds a stats object with another type of stats object. The result
            should be equivalent, up to the effects of numerical imprecision,
            as if in addition to all the values this object has seen, it has
            also seen the values added to the other object.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsUpToSecondOrderMoments.op_Addition(Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsUpToSecondOrderMoments,Microsoft.ML.Runtime.Internal.Utilities.SummaryStatisticsUpToSecondOrderMoments)">
            <summary>
            A convenient way to combine the observations of two Stats objects
            into a new Stats object.
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics">
            <summary>
            A class for one-pass accumulation of weighted summary statistics, up
            to the fourth moment. The accumulative algorithms used here may be
            reviewed at
            http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
            All quantities are weighted, except for <c>RawCount</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.Nonzero">
            <summary>
            The running count of non-zero elements.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.Skewness">
            <summary>
            The sample skewness.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.Kurtosis">
            <summary>
            The sample kurtosis.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.SkewnessZ">
            <summary>
            Z-test value for a normality test based on the skew.
            Under the null hypothesis of normality this quantity will
            itself be approximately normally distributed.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.KurtosisZ">
            <summary>
            Z-test value for a normality test based on the kurtosis.
            Under the null hypothesis of normality this quantity will
            itself be approximately normally distributed.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.OmnibusK2">
             <summary>
             Omnibus K2 unifying the skew and kurtosis Z-tests. Under the
             null hypothesis of normality this quantity will be approximately
             chi-squared distributed.
            
             D'Agostino, Ralph B.; Albert Belanger; Ralph B. D'Agostino, Jr (1990). "A suggestion
             for using powerful and informative tests of normality". The American Statistician 44
             (4): 316–321. JSTOR 2684359.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.Add(System.Double,System.Double,System.Int64)">
            <summary>
            Accumulates one more value, optionally weighted.
            This accumulation procedure is based on the following,
            with adjustments as appropriate for weighted instances:
            http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
            </summary>
            <param name="v">The value</param>
            <param name="w">The weight given to this value</param>
            <param name="c">Amount of appereance of this value</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.Add(Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics)">
            <summary>
            Adds a stats object with another type of stats object. The result
            should be equivalent, up to the effects of numerical imprecision,
            as if in addition to all the values this object has seen, it has
            also seen the values added to the other object.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics.op_Addition(Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics,Microsoft.ML.Runtime.Internal.Utilities.SummaryStatistics)">
            <summary>
            A convenient way to combine the observations of two Stats objects
            into a new Stats object.
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.SupervisedBinFinder">
            <summary>
            This class performs discretization of (value, label) pairs into bins in a way that minimizes 
            the target function "minimum description length".
            The algorithm is outlineed in an article
            "Multi-Interval Discretization of Continuous-Valued Attributes for Classification Learning"
            [Fayyad, Usama M.; Irani, Keki B. (1993)] http://ijcai.org/Past%20Proceedings/IJCAI-93-VOL2/PDF/022.pdf
            
            The class can be used several times sequentially, it is stateful and not thread-safe.
            Both Single and Double precision processing is implemented, and is identical.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SupervisedBinFinder.FindBins(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds the bins for Single values (and integer labels)
            </summary>
            <param name="maxBins">Maximum number of bins</param>
            <param name="minBinSize">Minimum number of values per bin (stopping condition for greedy bin splitting)</param>
            <param name="nLabels">Cardinality of the labels</param>
            <param name="values">The feature values</param>
            <param name="labels">The corresponding label values</param>
            <returns>An array of split points, no more than <paramref name="maxBins"/> total (but maybe less), ending with PositiveInfinity</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SupervisedBinFinder.FindBins(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds the bins for Double values (and integer labels)
            </summary>
            <param name="maxBins">Maximum number of bins</param>
            <param name="minBinSize">Minimum number of values per bin (stopping condition for greedy bin splitting)</param>
            <param name="nLabels">Cardinality of the labels</param>
            <param name="values">The feature values</param>
            <param name="labels">The corresponding label values</param>
            <returns>An array of split points, no more than <paramref name="maxBins"/> total (but maybe less), ending with PositiveInfinity</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SupervisedBinFinder.GetEntropy(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculate the entropy and label cardinality for a given interval within the data
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.SupervisedBinFinder.FindBinsCore">
            <summary>
            Finds the optimum bins with respect to <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.SupervisedBinFinder._cumulativeCounts"/>
            </summary>
            <returns>The sorted array of indices that are exclusive upper bounds of the respective bins</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream">
            <summary>
            A readable <see cref="T:System.IO.Stream"/> that is backed by a <see cref="T:System.IO.TextReader"/>.
            Because text readers strip line breaks from the end of their lines, this
            compensates by inserting <c>\n</c> line feed characters at the end of every
            input line, including the last one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream.#ctor(System.IO.TextReader)">
            <summary>
            Create a stream wrapping the given text reader, using the <see cref="P:System.Text.Encoding.UTF8"/>
            encoding.
            </summary>
            <param name="baseReader">the reader to wrap</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream.#ctor(System.IO.TextReader,System.Text.Encoding)">
            <summary>
            Create a stream wrapping the given text reader, using the given encoding. The class
            assumes that the encoding is distributive, that is, the concatenation of the byte
            encodings of different strings, is a valid byte encoding of the single encoding of
            the concatenation of those strings. (I believe all standard encodings obey this
            property.)
            </summary>
            <param name="baseReader">The reader to wrap.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream.EnsureBytes">
            <summary>
            A helper method that will either ensure that <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream._buffCur"/> is less
            than <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream._buffLim"/> (so there are at least some characters), or that
            <see cref="F:Microsoft.ML.Runtime.Internal.Utilities.TextReaderStream._eof"/> is set.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller">
            <summary>
            An object that serves as a source of a cancellation token, as well as having the ability
            for anything to push an exception into the message, to trigger the cancellation. The general
            intended usage is that, prior to creating a bunch of collaborating thread workers, this
            object is created and made accessible to them, somehow. Each thread worker will work as they
            would be engineered without this class, except they will wrap their contents in a try-catch
            block to push any exceptions (hopefully none) into this marshaller, using <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)"/>.
            Further, any potentially blocking operation of the thread workers must be changed to use
            <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Token"/> as the cancellation token (this token is cancelled iff <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)"/>
            is ever called). The controlling thread, whatever that may be, once it is either sure
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)"/> has been called (possibly by receiving the cancellation) or is sure somehow
            that the workers have finished by its own means, will call <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.ThrowIfSet(Microsoft.ML.Runtime.IExceptionContext)"/> to throw
            the set exception as an inner exception, in the wrapping thread.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Token">
            <summary>
            A cancellation token, whose source will be cancelled if <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)"/> is ever called.
            Any thread blocking operation of a family of thread workers using this structure
            must use this cancellation token, or else there is a strong possibility for threads
            to stop responding if an exception is thrown at any point.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)">
            <summary>
            Store an exception and set the cancellation token. If this was already
            called, this newly passed in exception is ignored. (Important, since a
            common source of exceptions would be the exceptions relating to the cancellation.)
            </summary>
            <param name="component">The type of worker that threw the exception, used
            in the description of the wrapping exception</param>
            <param name="ex">The exception that will become the inner exception</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.ThrowIfSet(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            If an exception was ever set through <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)"/>, raise it as an appropriate
            inner exception. This should only be called just prior to dispose, when the workers
            have already finished. If there is no stored exception, this will do nothing. Note
            that this does not "expire" the exception, that is, if you were to call this again,
            it would throw the same exception.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified concurrency level.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.Tree`2">
            <summary>
            The tree structure is simultaneously a tree, and a node in a tree. The interface to
            get children occurs through the tree itself implementing itself as a dictionary. This
            tree is not terribly efficient, and is meant to be accomodate additions, deletions,
            and change of values. Because it is implemented as a dictionary, there is an unfortunate
            collision in naming between the dictionary type of "values" (which in this case are
            child trees) and the tree type of values, called "node values."
            </summary>
            <typeparam name="TKey">Children are keyed with values of this type</typeparam>
            <typeparam name="TValue">The type of the node value</typeparam>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.NodeValue">
            <summary>
            Either the node value, or the default of the value type,
            if <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.HasNodeValue"/> is false.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Key">
            <summary>
            This is the key for this child node in its parent, if any. If this is not
            a child of any parent, that is, it is the root of its own tree, then 
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Parent">
            <summary>
            The parent for this tree, or <c>null</c> if it has no parent.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Keys">
            <summary>
            All child keys for this node.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Values">
            <summary>
            All children for this node.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Count">
            <summary>
            The number of children with this node as a parent.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.#ctor">
            <summary>
            Initializes a tree with no node value, and no children.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.TryGetValue(`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}@)">
            <summary>
            Tries to get the subtree for a child key.
            </summary>
            <param name="key">The key of the child to find</param>
            <param name="value">The child, if any, or <c>null</c> if no child
            with this key is present</param>
            <returns>Whether a child with this key was present</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.ContainsKey(`0)">
            <summary>
            Sees whether a child with a given key is present.
            </summary>
            <param name="key">The key of the child to find</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Add(System.Collections.Generic.KeyValuePair{`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}})">
            <summary>
            Adds a new child to this dictionary.
            </summary>
            <param name="item">The key / child node pair to add</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Add(`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1})">
            <summary>
            Adds a node as a child of this node. This will disconnect the 
            </summary>
            <param name="key"></param>
            <param name="newChild"></param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Detach">
            <summary>
            Removes this node and all its descendants from a tree, leading it to
            be the root of its own tree. Following this, <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Parent"/> will
            be <c>null</c>, and the previous parent (if any) will no longer have
            this node present as a child.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Remove(`0)">
            <summary>
            Remove a child with a specified key.
            </summary>
            <param name="key">The key of the child to remove</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils">
            <summary>
            Convenience utilities for vector operations on <see cref="T:Microsoft.ML.Runtime.Data.VBuffer`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.Items``1(``0[],System.Int32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            A helper method that gives us an iterable over the items given the fields from a <see cref="T:Microsoft.ML.Runtime.Data.VBuffer`1"/>.
            Note that we have this in a separate utility class, rather than in its more natural location of
            <see cref="T:Microsoft.ML.Runtime.Data.VBuffer`1"/> itself, due to a bug in the C++/CLI compiler. (DevDiv 1097919:
            [C++/CLI] Nested generic types are not correctly imported from metadata). So, if we want to use
            <see cref="T:Microsoft.ML.Runtime.Data.VBuffer`1"/> in C++/CLI projects, we cannot have a generic struct with a nested class
            that has the outer struct type as a field.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ForEachDefined``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,System.Action{System.Int32,``0})">
            <summary>
            Applies <paramref name="visitor"/> to every explicitly defined element of the vector,
            in order of index.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ForEachBothDefined``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``0}@,System.Action{System.Int32,``0,``0})">
            <summary>
            Applies the <paramref name="visitor "/>to each corresponding pair of elements
            where the item is emplicitly defined in the vector. By explicitly defined,
            we mean that for a given index <c>i</c>, both vectors have an entry in
            <see cref="F:Microsoft.ML.Runtime.Data.VBuffer`1.Values"/> corresponding to that index.
            </summary>
            <param name="a">The first vector</param>
            <param name="b">The second vector</param>
            <param name="visitor">Delegate to apply to each pair of non-zero values.
            This is passed the index, and two values</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ForEachEitherDefined``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``0}@,System.Action{System.Int32,``0,``0})">
            <summary>
            Applies the ParallelVisitor to each corresponding pair of elements where at least one is non-zero, in order of index.
            </summary>
            <param name="a">a vector</param>
            <param name="b">another vector</param>
            <param name="visitor">Function to apply to each pair of non-zero values - passed the index, and two values</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.Clear``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@)">
            <summary>
            Sets all values in the vector to the default value for the type, without changing the
            density or index structure of the input array. That is to say, the count of the input
            vector will be the same afterwards as it was before.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.SlotValueManipulator`1">
            <summary>
            A delegate for functions that can change a value.
            </summary>
            <param name="slot">Index of entry</param>
            <param name="value">Value to change</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ValuePredicate`1">
            <summary>
            A predicate on some sort of value.
            </summary>
            <param name="src">The value to test</param>
            <returns>The result of some sort of test from that value</returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.Apply``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.SlotValueManipulator{``0})">
            <summary>
            Applies the <paramref name="manip"/> to every explicitly defined
            element of the vector.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyAt``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,System.Int32,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.SlotValueManipulator{``0},Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ValuePredicate{``0})">
            <summary>
            Applies some function on a value at a particular slot value, changing that slot value.
            This function will, wherever possible, not change the structure of <paramref name="dst"/>.
            If the vector is sparse, and the corresponding slot is not explicitly represented,
            then this can involve memory copying and possibly memory reallocation on <paramref name="dst"/>.
            However, if the item is explicitly represented, even if the item is set to the default
            value of <typeparamref name="T"/> it will not change the structure of <paramref name="dst"/>,
            in terms of sparsifying a dense array, or dropping indices.
            </summary>
            <param name="dst">The vector to modify</param>
            <param name="slot">The slot of the vector to modify</param>
            <param name="manip">The manipulation function</param>
            <param name="pred">A predicate that returns true if we should skip insertion of a value into 
            sparse vector if it was default. If the predicate is null, we insert any non-default.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.Densify``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@)">
            <summary>
            Given a vector, turns it into an equivalent dense representation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.DensifyFirst``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,System.Int32)">
            <summary>
            Given a vector, ensure that the first <paramref name="denseCount"/> slots are explicitly
            represented.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.CreateMaybeSparseCopy``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.RefPredicate{``0},System.Single)">
            <summary>
            Creates a maybe sparse copy of a VBuffer. 
            Whether the created copy is sparse or not is determined by the proportion of non-default entries compared to the sparsity parameter.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator`2">
            <summary>
            A delegate for functions that access an index and two corresponding
            values, possibly changing one of them.
            </summary>
            <param name="slot">Slot index of the entry.</param>
            <param name="src">Value from first vector.</param>
            <param name="dst">Value from second vector, which may be manipulated.</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulatorCopy`2">
            <summary>
            A delegate for functions that access an index and two corresponding
            values, stores the result in another vector.
            </summary>
            <param name="slot">Slot index of the entry.</param>
            <param name="src">Value from first vector.</param>
            <param name="dst">Value from second vector.</param>
            <param name="res">The value to store the result.</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWith``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})">
            <summary>
            Applies the <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator`2"/> to each pair of elements
            where <paramref name="src"/> is defined, in order of index. If there is
            some value at an index in <paramref name="dst"/> that is not defined in
            <paramref name="src"/>, that item remains without any further modification.
            If either of the vectors are dense, the resulting <paramref name="dst"/>
            will be dense. Otherwise, if both are sparse, the output will be sparse iff
            there is any slot that is not explicitly represented in either vector.
            </summary>
            <param name="src">Argument vector, whose elements are only read</param>
            <param name="dst">Argument vector, that could change</param>
            <param name="manip">Function to apply to each pair of elements</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithCopy``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulatorCopy{``0,``1})">
            <summary>
            Applies the <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator`2"/> to each pair of elements
            where <paramref name="src"/> is defined, in order of index. It stores the result 
            in another vector. If there is some value at an index in <paramref name="dst"/> 
            that is not defined in <paramref name="src"/>, that slot value is copied to the 
            corresponding slot in the result vector without any further modification.
            If either of the vectors are dense, the resulting <paramref name="res"/>
            will be dense. Otherwise, if both are sparse, the output will be sparse iff
            there is any slot that is not explicitly represented in either vector.
            </summary>
            <param name="src">Argument vector, whose elements are only read</param>
            <param name="dst">Argument vector, whose elements are only read</param>
            <param name="res">Result vector</param>
            <param name="manip">Function to apply to each pair of elements</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithEitherDefined``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})">
            <summary>
            Applies the <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator`2"/> to each pair of elements
            where either <paramref name="src"/> or <paramref name="dst"/>, has an element
            defined at that index. If either of the vectors are dense, the resulting
            <paramref name="dst"/> will be dense. Otherwise, if both are sparse, the output
            will be sparse iff there is any slot that is not explicitly represented in
            either vector.
            </summary>
            <param name="src">Argument vector, whose elements are only read</param>
            <param name="dst">Argument vector, that could change</param>
            <param name="manip">Function to apply to each pair of elements</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithEitherDefinedCopy``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulatorCopy{``0,``1})">
            <summary>
            Applies the <see cref="T:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator`2"/> to each pair of elements
            where either <paramref name="src"/> or <paramref name="dst"/>, has an element
            defined at that index. It stores the result in another vector <paramref name="res"/>. 
            If either of the vectors are dense, the resulting <paramref name="res"/>
            will be dense. Otherwise, if both are sparse, the output will be sparse iff
            there is any slot that is not explicitly represented in either vector.
            </summary>
            <param name="src">Argument vector, whose elements are only read</param>
            <param name="dst">Argument vector, whose elements are only read</param>
            <param name="res">Result vector</param>
            <param name="manip">Function to apply to each pair of elements</param>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithCore``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1},System.Boolean)">
            <summary>
            The actual implementation of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWith``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})"/> and
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithEitherDefined``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})"/>, that has internal branches on the implementation
            where necessary depending on whether this is an inner or outer join of the
            indices of <paramref name="src"/> on <paramref name="dst"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithCoreCopy``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulatorCopy{``0,``1},System.Boolean)">
            <summary>
            The actual implementation of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithCopy``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulatorCopy{``0,``1})"/> and
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithEitherDefinedCopy``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulatorCopy{``0,``1})"/>, that has internal branches on the implementation
            where necessary depending on whether this is an inner or outer join of the
            indices of <paramref name="src"/> on <paramref name="dst"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyIntoEitherDefined``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,System.Func{System.Int32,``0,``1})">
            <summary>
            Applies a function to explicitly defined elements in a vector <paramref name="src"/>,
            storing the result in <paramref name="dst"/>, overwriting any of its existing contents.
            The contents of <paramref name="dst"/> do not affect calculation. If you instead wish
            to calculate a function that reads and writes <paramref name="dst"/>, see
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWith``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})"/> and <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithEitherDefined``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})"/>. Post-operation,
            <paramref name="dst"/> will be dense iff <paramref name="src"/> is dense.
            </summary>
            <seealso cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWith``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})"/>
            <seealso cref="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyWithEitherDefined``2(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.PairManipulator{``0,``1})"/>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.ApplyInto``3(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``1}@,Microsoft.ML.Runtime.Data.VBuffer{``2}@,System.Func{System.Int32,``0,``1,``2})">
            <summary>
            Applies a function <paramref name="func"/> to two vectors, storing the result in
            <paramref name="dst"/>, whose existing contents are discarded and overwritten. The
            function is called for every index value that appears in either <paramref name="a"/>
            or <paramref name="b"/>. If either of the two inputs is dense, the output will
            necessarily be dense. Otherwise, if both are sparse, the output will be sparse iff
            there is any slot that is not explicitly represented in either vector.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Internal.Utilities.VBufferUtils.Copy``1(System.Collections.Generic.List{``0},Microsoft.ML.Runtime.Data.VBuffer{``0}@,System.Int32)">
            <summary>
            Copy from a source list to the given VBuffer destination.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.IExceptionContext">
            <summary>
            Interface for "processing" exceptions before they are thrown. This can
            be used to add context to the exception, wrap the exception in another one,
            totally replace the exception, etc. It is not legal to return null from
            Process (unless null was passed in, which really shouldn't happen).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Runtime.IExceptionContext.ContextDescription">
            <summary>
            A string describing the context itself.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.Process``1(``0,Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            Does standard processing of an exception (typically called after construction
            but before it is thrown).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.Mark``1(``0)">
            <summary>
            Mark the exception by setting <see cref="F:Microsoft.ML.Runtime.Contracts.IsMarkedKey"/> in the exception
            <see cref="P:System.Exception.Data"/> to 1.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.IsMarked(System.Exception)">
            <summary>
            Indicates whether the exception was "marked" the Contracts code.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.MarkSensitive``1(``0,Microsoft.ML.Runtime.MessageSensitivity)">
            <summary>
            Exceptions whose message communicates potentially sensitive information should be
            marked using this method, before they are thrown. Note that if the exception already
            had this flag set, the message will be flagged with the bitwise or of the existing
            flag, alongside the passed in sensivity.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.Sensitivity(System.Exception)">
            <summary>
            This is a convenience method to get the sensitivity of an exception,
            as encoded with <see cref="F:Microsoft.ML.Runtime.Contracts.SensitivityKey"/>. If there is no key, then
            the message is assumed to be of unknown sensitivity, i.e., it is assumed
            that it might contain literally anything.
            </summary>
            <param name="ex">The exception to query</param>
            <returns>The value encoded at the <see cref="F:Microsoft.ML.Runtime.Contracts.SensitivityKey"/>, if it is
            a <see cref="T:Microsoft.ML.Runtime.MessageSensitivity"/> value. If neither of these conditions
            hold then <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Unknown"/> is returned.</returns>
        </member>
        <member name="T:Microsoft.ML.Runtime.Contracts.SensitiveExceptionContext">
            <summary>
            This is an internal convenience implementation of an exception context to make marking
            exceptions with a specific sensitivity flag a bit less onorous. The alternative to a scheme
            like this, where messages are marked through use of <see cref="M:Microsoft.ML.Runtime.Contracts.SensitiveExceptionContext.Process``1(``0)"/>,
            would be that every check and exception method in this file would need some "peer" where
            sensitivity was set. Since there are so many, we have this method instead. I'm not sure if
            there will be performance implications. There shouldn't be, since checks rarely happen in
            tight loops.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Contracts.SensitiveExceptionContext.Inner">
            <summary>
            We will run this instances <see cref="M:Microsoft.ML.Runtime.IExceptionContext.Process``1(``0)"/> first.
            This can be null.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Runtime.Contracts.SensitiveExceptionContext.ToMark">
            <summary>
            Exceptions will be marked with this. If <see cref="F:Microsoft.ML.Runtime.Contracts.SensitiveExceptionContext.Inner"/> happens to mark it with a sensivity
            flag, then the result will not only be this value, but the bitwise or of this with the existing
            value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.NotSensitive">
            <summary>
            A convenience context for marking exceptions from checks and excepts with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.None"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.NotSensitive(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            A convenience context for marking exceptions from checks and excepts with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.None"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.UserSensitive">
            <summary>
            A convenience context for marking exceptions from checks and excepts with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.UserData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.UserSensitive(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            A convenience context for marking exceptions from checks and excepts with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.UserData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.SchemaSensitive">
            <summary>
            A convenience context for marking exceptions from checks and excepts with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Schema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.SchemaSensitive(Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            A convenience context for marking exceptions from checks and excepts with <see cref="F:Microsoft.ML.Runtime.MessageSensitivity.Schema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.SetAssertHandler(System.Action{System.String,Microsoft.ML.Runtime.IExceptionContext})">
            <summary>
            Sets the assert handler to the given function, returning the previous handler.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.Except">
            <summary>
            Default exception type (currently InvalidOperationException)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptUserArg(System.String)">
            <summary>
            For signalling bad user input.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptParam(System.String)">
            <summary>
            For signalling bad function parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptValue(System.String)">
            <summary>
            For signalling null function parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptEmpty(System.String)">
            <summary>
            For signalling null or empty function parameters (strings, arrays, collections, etc).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptWhiteSpace(System.String)">
            <summary>
            For signalling null, empty or white-space function parameters (strings, arrays, collections, etc).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptDecode">
            <summary>
            For signalling errors in decoding information, whether while reading from a file,
            parsing user input, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptIO">
            <summary>
            For signalling IO failures.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptNotImpl">
            <summary>
            For signalling functionality that is not YET implemented.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.ExceptNotSupp">
            <summary>
            For signalling functionality that is not implemented by design.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.CheckUserArg(System.Boolean,System.String)">
            <summary>
            CheckUserArg / ExceptUserArg should be used when the validation of user-provided arguments failed.
            Typically, this is shortly after the arguments are parsed using CmdParser.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.CheckAlive(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Check state of the host and throw exception if host marked to stop all exection.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.CheckValueOrNull``1(``0)">
            <summary>
            This documents that the parameter can legally be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.Contracts.AssertValueOrNull``1(``0)">
            <summary>
            This documents that the parameter can legally be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IRandom.NextSingle">
            <summary>
            Generates a Single in the range [0, 1).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IRandom.NextDouble">
            <summary>
            Generates a Double in the range [0, 1).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IRandom.Next">
            <summary>
            Generates an int in the range [0, int.MaxValue]. Note that this differs
            from the contract for System.Random.Next, which claims to never return
            int.MaxValue.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IRandom.NextSigned">
            <summary>
            Generates an int in the range [int.MinValue, int.MaxValue].
            </summary>
        </member>
        <member name="M:Microsoft.ML.Runtime.IRandom.Next(System.Int32)">
            <summary>
            Generates an int in the range [0, limit), unless limit == 0, in which case this advances the generator
            and returns 0.
            Throws if limit is less than 0.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Runtime.TauswortheHybrid">
            <summary>
            Tausworthe hybrid random number generator.
            </summary>
        </member>
    </members>
</doc>
